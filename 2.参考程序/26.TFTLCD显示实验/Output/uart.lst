C51 COMPILER V9.01   UART                                                                  06/16/2024 10:44:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: E:\dianzi\Keil C51\C51\BIN\C51.EXE Public\uart.c LARGE BROWSE INCDIR(.\User;.\Public;.\GUI;.\APP\tf
                    -tlcd;.\APP\touch) DEBUG OBJECTEXTEND PRINT(.\output\uart.lst) OBJECT(.\output\uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          #define RELOAD_COUNT 0xFA // 宏定义波特率发生器的载入值 9600
   4          
   5          // 初始化函数
   6          void UART_Init(void)
   7          {
   8   1              SCON = 0X50; // 设置为工作方式1
   9   1              TMOD = 0X20; // 设置计数器工作方式2
  10   1              PCON = 0X80; // 波特率加倍
  11   1      
  12   1              TH1 = RELOAD_COUNT;     //计数器初始值设置
  13   1              TL1 = TH1;
  14   1              //ES=1;                         //关闭接收中断
  15   1              EA = 1; // 打开总中断
  16   1              TR1 = 1; // 打开计数器
  17   1              TI = 1; // 发送中断标记位，如果使用printf函数的必须设置 
  18   1      }
  19          
  20          void UART_Cmd(FunctionalState ensta)
  21          {
  22   1              ES = ensta;     
  23   1      }
  24          
  25          void UART_SendData(unsigned char dat)
  26          {
  27   1              ES = 0; // 关闭串口中断
  28   1              TI = 0; // 清发送完毕中断请求标志位
  29   1              SBUF = dat; // 发送
  30   1              while(TI == 0); //等待发送完毕
  31   1              TI = 0; // 清发送完毕中断请求标志位
  32   1              ES = 1; // 允许串口中断
  33   1      }
  34          
  35          void UART_SendString(unsigned char *pbuf)
  36          {
  37   1              while(*pbuf!='\0') // 遇到空格跳出循环  
  38   1              {
  39   2                      UART_SendData(*pbuf);
  40   2                      delay_10us(5);
  41   2                      pbuf++; 
  42   2              }
  43   1      }
  44          
  45          unsigned char UART_RX_BUF[UART_REC_LEN]; // 接收缓冲,最大UART_REC_LEN个字节.
  46          //接收状态
  47          //bit15，       接收完成标志
  48          //bit14，       接收到0x0d
  49          //bit13~0，     接收到的有效字节数目
  50          unsigned int UART_RX_STA = 0;       //接收状态标记      
  51          
  52          
  53          void UART_IRQn() interrupt 4
  54          {
C51 COMPILER V9.01   UART                                                                  06/16/2024 10:44:16 PAGE 2   

  55   1              unsigned char r;
  56   1              
  57   1              if(RI)
  58   1              {
  59   2                      RI = 0;
  60   2                      r = SBUF; // 读取接收到的数据
  61   2                      if((UART_RX_STA&0x8000) == 0) // 接收未完成
  62   2                      {
  63   3                              if(UART_RX_STA&0x4000) // 接收到了0x0d
  64   3                              {
  65   4                                      if(r!=0x0a)
  66   4                                              UART_RX_STA = 0; // 接收错误,重新开始
  67   4                                      else 
  68   4                                              UART_RX_STA|=0x8000;    // 接收完成了 
  69   4                              }
  70   3                              else // 还没收到0X0D
  71   3                              {       
  72   4                                      if(r == 0x0d)
  73   4                                              UART_RX_STA |= 0x4000;
  74   4                                      else
  75   4                                      {
  76   5                                              UART_RX_BUF[UART_RX_STA&0X3FFF] = r;
  77   5                                              UART_RX_STA++;
  78   5                                              if(UART_RX_STA > (UART_REC_LEN-1))
  79   5                                                      UART_RX_STA=0; // 接收数据错误,重新开始接收       
  80   5                                      }                
  81   4                              }
  82   3                      }               
  83   2              }       
  84   1      }
  85          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    228    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     52       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
