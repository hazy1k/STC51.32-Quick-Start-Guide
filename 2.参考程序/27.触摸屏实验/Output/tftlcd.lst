C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TFTLCD
OBJECT MODULE PLACED IN .\output\tftlcd.obj
COMPILER INVOKED BY: E:\dianzi\Keil C51\C51\BIN\C51.EXE APP\tftlcd\tftlcd.c LARGE BROWSE INCDIR(.\User;.\Public;.\GUI;.\
                    -APP\tftlcd;.\APP\touch) DEBUG OBJECTEXTEND PRINT(.\output\tftlcd.lst) OBJECT(.\output\tftlcd.obj)

line level    source

   1          #include "tftlcd.h"
   2          #include "font.h" 
   3          #include "uart.h"
   4          #include "stdlib.h"
   5          
   6          
   7          
   8          //LCD的画笔颜色和背景色    
   9          u16 FRONT_COLOR=WHITE;  //画笔颜色
  10          u16 BACK_COLOR=BLACK;  //背景色 
  11          
  12          _tftlcd_data tftlcd_data; 
  13          
  14          void Delay(unsigned int dly)
  15          {
  16   1          unsigned int i,j;
  17   1      
  18   1          for(i=0;i<dly;i++)
  19   1              for(j=0;j<255;j++);
  20   1      }
  21          //写寄存器函数
  22          //cmd:寄存器值
  23          void LCD_WriteCmd(u16 cmd)
  24          {
  25   1      #ifdef TFT20_HX8309
                      unsigned char cmdH, cmdL;
                      cmdH = cmd >> 8;
                      cmdL = cmd & 0x00FF;
              
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                      
                      TFT_RD = 1;           //选择写
                      TFT_RS = 0;                       //选择命令
                              
                      TFT_DATAPORTH = cmdH; //放置命令数据
                      TFT_DATAPORTL = cmdL; //放置命令数据
              
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                      TFT_CS = 1;                       //关闭片选
              #endif
  44   1      
  45   1      #ifdef TFT22_R61503B
                      unsigned char cmdH, cmdL;
                      cmdH = cmd >> 8;
                      cmdL = cmd & 0x00FF;
                      
                      
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                      
                      TFT_RD = 1;           //选择写
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 2   

                      TFT_RS = 0;                       //选择命令
                      
                      
                      TFT_DATAPORTH = cmdH; //放置命令数据
                      TFT_WR = 0;                       //写入时序
                      
                      TFT_WR = 1;
                      TFT_DATAPORTH = cmdL;
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                      TFT_CS = 1;                       //关闭片选 
              #endif
  68   1      
  69   1      #ifdef TFT22_ILI9225B
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
              
                      TFT_DATAPORTH=cmd>>8;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_DATAPORTH=cmd&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;
              #endif
  85   1      
  86   1      #ifdef TFT24_ST7781R    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
  95   1      
  96   1      #ifdef TFT26_R61509V    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 105   1      
 106   1      #ifdef TFT26_ILI9325D   
 107   1              TFT_WR=1;
 108   1              TFT_CS=0;
 109   1              TFT_RD=1;
 110   1              TFT_RS=0;
 111   1      
 112   1              TFT_DATAPORTL=cmd>>8;
 113   1              TFT_WR=0;
 114   1              TFT_WR=1;
 115   1      
 116   1              TFT_DATAPORTL=cmd&0x00ff;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 3   

 117   1              TFT_WR=0;
 118   1              TFT_WR=1;
 119   1      
 120   1              TFT_CS=1;
 121   1      #endif
 122   1      
 123   1      #ifdef TFT24_ST7789S    
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 133   1      
 134   1      #ifdef TFT24_SSD1297    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 143   1      
 144   1      #ifdef TFT20_ILI9225
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
              
                      TFT_DATAPORTH=cmd>>8;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_DATAPORTH=cmd&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;
              #endif
 160   1      
 161   1      #ifdef TFT20_ILI9341
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 171   1      
 172   1      #ifdef TFT20_ST7775R    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 4   

                      TFT_CS=1;
              #endif
 181   1      
 182   1      #ifdef TFT20_ST7775RV   
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
              
                      TFT_DATAPORTL=cmd>>8;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_DATAPORTL=cmd&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;
              #endif
 198   1      
 199   1      #ifdef TFT20_ILI9225C
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
              
                      TFT_DATAPORTL=cmd>>8;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_DATAPORTL=cmd&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;
              #endif
 215   1      
 216   1      #ifdef TFT20_R61503U    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 225   1      
 226   1      #ifdef TFT20_HX8340B
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 236   1      
 237   1      #ifdef TFT24_HX8357A    
                      TFT_CS=0;
                      TFT_RS=0;
                      TFT_DATAPORTH=cmd>>8;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 5   

                      TFT_DATAPORTL=cmd;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 246   1      }
 247          
 248          //写数据
 249          //dat:要写入的值
 250          void LCD_WriteData(u16 dat)
 251          {
 252   1      #ifdef TFT20_HX8309
                      unsigned char datH, datL;
                      datH = dat >> 8;
                      datL = dat & 0x00FF;
              
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                      
                      TFT_RD = 1;           //选择写
                      TFT_RS = 1;                       //选择发送数据
                              
                      TFT_DATAPORTH = datH;  //放置命令数据
                      TFT_DATAPORTL = datL;  //放置命令数据
              
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                      TFT_CS = 1;                       //关闭片选
              #endif
 271   1      
 272   1      #ifdef TFT22_R61503B
                      unsigned char datH, datL;
                      datH = dat >> 8;
                      datL = dat & 0xFF;
                      
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                              
                      TFT_RD = 1;           //选择写
                      TFT_RS = 1;                       //选择发送数据
                      
              
                      TFT_DATAPORTH = datH;  //放置命令数据
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
              
                      TFT_DATAPORTH = datL;   
              
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                       TFT_CS = 1;                      //关闭片选
              #endif
 295   1      #ifdef TFT22_ILI9225B
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=dat>>8;
                      TFT_WR=0;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 6   

                      TFT_WR=1;
                      TFT_DATAPORTH=dat&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 310   1      
 311   1      #ifdef TFT24_ST7781R
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 320   1      
 321   1      #ifdef TFT26_R61509V
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif  
 330   1      
 331   1      #ifdef TFT26_ILI9325D
 332   1              TFT_WR=1;
 333   1              TFT_CS=0;
 334   1              TFT_RD=1;
 335   1              TFT_RS=1;
 336   1                       
 337   1              TFT_DATAPORTL=dat>>8;
 338   1              TFT_WR=0;
 339   1              TFT_WR=1;
 340   1              TFT_DATAPORTL=dat&0x00ff;
 341   1              TFT_WR=0;
 342   1              TFT_WR=1;
 343   1      
 344   1              TFT_CS=1;       
 345   1      #endif
 346   1      
 347   1      #ifdef TFT24_ST7789S    
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                      TFT_DATAPORTH=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;
              #endif
 357   1      
 358   1      #ifdef TFT24_SSD1297
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 7   

                      TFT_CS=1;       
              #endif
 367   1      
 368   1      #ifdef TFT20_ILI9225
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=dat>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTH=dat&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 383   1      
 384   1      #ifdef TFT20_ILI9341
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                      TFT_DATAPORTH=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 394   1      
 395   1      #ifdef TFT20_ST7775R
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 404   1      
 405   1      #ifdef TFT20_ST7775RV
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTL=dat>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTL=dat&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 420   1      
 421   1      #ifdef TFT20_ILI9225C
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 8   

                      TFT_DATAPORTL=dat>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTL=dat&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 436   1      
 437   1      #ifdef TFT20_R61503U
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 446   1      
 447   1      #ifdef TFT20_HX8340B
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                      TFT_DATAPORTH=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 457   1      
 458   1      #ifdef TFT24_HX8357A
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=dat>>8;
                      TFT_DATAPORTL=dat;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif  
 467   1      }
 468          
 469          void LCD_WriteData_Color(u16 color)
 470          {
 471   1      #ifdef TFT20_HX8309
                      unsigned char datH, datL;
                      datH = color >> 8;
                      datL = color & 0x00FF;
              
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                      
                      TFT_RD = 1;           //选择写
                      TFT_RS = 1;                       //选择发送数据
                              
                      TFT_DATAPORTH = datH;  //放置命令数据
                      TFT_DATAPORTL = datL;  //放置命令数据
              
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                      TFT_CS = 1;                       //关闭片选
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 9   

              #endif
 490   1      
 491   1      #ifdef TFT22_R61503B
                       unsigned char datH, datL;
                      datH = color >> 8;
                      datL = color & 0xFF;
                      
                      TFT_WR = 1;                       //初始化WR
                      TFT_CS = 0;                       //打开片选
                              
                      TFT_RD = 1;           //选择写
                      TFT_RS = 1;                       //选择发送数据
                      
              
                      TFT_DATAPORTH = datH;  //放置命令数据
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
              
                      TFT_DATAPORTH = datL;   
              
                      TFT_WR = 0;                       //写入时序
                      TFT_WR = 1;
                      
                       TFT_CS = 1;                      //关闭片选
              #endif
 514   1      #ifdef TFT22_ILI9225B
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=color>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTH=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 529   1      
 530   1      #ifdef TFT24_ST7781R
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 539   1      
 540   1      #ifdef TFT26_R61509V
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 549   1      
 550   1      #ifdef TFT26_ILI9325D
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 10  

 551   1              TFT_WR=1;
 552   1              TFT_CS=0;
 553   1              TFT_RD=1;
 554   1              TFT_RS=1;
 555   1                       
 556   1              TFT_DATAPORTL=color>>8;
 557   1              TFT_WR=0;
 558   1              TFT_WR=1;
 559   1              TFT_DATAPORTL=color&0x00ff;
 560   1              TFT_WR=0;
 561   1              TFT_WR=1;
 562   1      
 563   1              TFT_CS=1;       
 564   1      #endif
 565   1      
 566   1      #ifdef TFT24_ST7789S
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_WR = 0;                       
                      TFT_WR = 1;
                      TFT_DATAPORTH=color&0xFF;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 579   1      
 580   1      #ifdef TFT24_SSD1297
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 589   1      
 590   1      #ifdef TFT20_ILI9225
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=color>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTH=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 605   1      
 606   1      #ifdef TFT20_ILI9341
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=color>>8;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 11  

                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTH=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 621   1      
 622   1      #ifdef TFT20_ST7775R
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 631   1      
 632   1      #ifdef TFT20_ST7775RV
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTL=color>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTL=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 647   1      
 648   1      #ifdef TFT20_ILI9225C
                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTL=color>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTL=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 663   1      
 664   1      #ifdef TFT20_R61503U
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif
 673   1      
 674   1      #ifdef TFT20_HX8340B
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 12  

                      TFT_WR=1;
                      TFT_CS=0;
                      TFT_RD=1;
                      TFT_RS=1;
                               
                      TFT_DATAPORTH=color>>8;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_DATAPORTH=color&0x00ff;
                      TFT_WR=0;
                      TFT_WR=1;
              
                      TFT_CS=1;       
              #endif
 689   1      
 690   1      #ifdef TFT24_HX8357A
                      TFT_CS=0;
                      TFT_RS=1;        
                      TFT_DATAPORTH=color>>8;
                      TFT_DATAPORTL=color;
                      TFT_WR=0;
                      TFT_WR=1;
                      TFT_CS=1;       
              #endif  
 699   1      }
 700          
 701          void LCD_WriteCmdData(u16 cmd,u16 dat)
 702          {
 703   1              LCD_WriteCmd(cmd);
 704   1              LCD_WriteData(dat);
 705   1      }
 706          
 707          //读数据
 708          //返回值:读到的值
 709          u16 LCD_ReadData(void)
 710          {
 711   1              u16 ram;
 712   1      
 713   1              TFT_DATAPORTH=0xff;
 714   1              TFT_DATAPORTL=0xff;
 715   1      
 716   1      #ifdef TFT20_HX8309
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 727   1      
 728   1      #ifdef TFT22_R61503B
                      
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;        
              
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 13  

                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTH;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 744   1      
 745   1      #ifdef TFT22_ILI9225B
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;        
              
                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTH;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 760   1      
 761   1      #ifdef TFT24_ST7781R
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;      
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 772   1      
 773   1      #ifdef TFT26_R61509V
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 784   1      
 785   1      #ifdef TFT26_ILI9325D
 786   1              TFT_CS=0;
 787   1              TFT_RS=1;
 788   1              TFT_RD=0;
 789   1              _nop_();
 790   1              ram=TFT_DATAPORTL;
 791   1              ram<<=8;
 792   1              ram|=TFT_DATAPORTL;
 793   1              TFT_RD=1;       
 794   1              TFT_CS=1;
 795   1      #endif
 796   1      
 797   1      #ifdef TFT24_ST7789S    
                      TFT_CS=0;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 14  

                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;      
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 806   1      
 807   1      #ifdef TFT24_SSD1297
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 818   1      
 819   1      #ifdef TFT20_ILI9225
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;        
              
                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTH;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 834   1      
 835   1      #ifdef TFT20_ILI9341
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;        
              
                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTH;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 850   1      
 851   1      #ifdef TFT20_ST7775R
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 15  

              #endif
 862   1      
 863   1      #ifdef TFT20_ST7775RV
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTL;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 874   1      
 875   1      #ifdef TFT20_ILI9225C
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTL;
                      ram<<=8;        
              
                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 890   1      
 891   1      #ifdef TFT20_R61503U
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 902   1      
 903   1      #ifdef TFT20_HX8340B
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;        
              
                      TFT_RD=1;       
                      TFT_RD=0;
                      _nop_();
                      ram|=TFT_DATAPORTH;
                      TFT_RD=1;
                      TFT_CS=1;
              #endif
 918   1      
 919   1      #ifdef TFT24_HX8357A
                      TFT_CS=0;
                      TFT_RS=1;
                      TFT_RD=0;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 16  

                      _nop_();
                      ram=TFT_DATAPORTH;
                      ram<<=8;
                      ram|=TFT_DATAPORTL;
                      TFT_RD=1;       
                      TFT_CS=1;
              #endif
 930   1      
 931   1              return ram;     
 932   1      }
 933          
 934          //设置LCD显示方向
 935          //dir:0,竖屏；1,横屏
 936          void LCD_Display_Dir(u8 dir)
 937          {
 938   1              tftlcd_data.dir=dir;
 939   1              if(dir==0)  //默认竖屏方向
 940   1              {
 941   2      #ifdef TFT20_HX8309
                              LCD_WriteCmdData(0x0001,0x011b); //Output Direct
              #endif
 944   2      #ifdef TFT22_R61503B
                              LCD_WriteCmdData(0x0001,0x0500); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 948   2      #ifdef TFT22_ILI9225B           
                              LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 952   2      
 953   2      #ifdef TFT24_ST7781R            
                              LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                              LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                              LCD_WriteData(0x5030);
              #endif
 958   2      
 959   2      #ifdef TFT26_R61509V            
                              LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 963   2      
 964   2      #ifdef TFT26_ILI9325D           
 965   2                      LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
 966   2                      LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
 967   2      #endif
 968   2      
 969   2      #ifdef TFT24_ST7789S
                              LCD_WriteCmdData(0x36,0x10); ///设置彩屏显示方向的寄存器  
              #endif
 972   2      
 973   2      #ifdef TFT24_SSD1297
                              LCD_WriteCmdData(0x0011, 0x6830); //Output Direct               
                              LCD_WriteCmdData(0x0001, 0x2B3F); //Output Direct
              #endif
 977   2      
 978   2      #ifdef TFT20_ILI9225            
                              LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
 982   2      
 983   2      #ifdef TFT20_ILI9341            
                              LCD_WriteCmdData(0x36, 0x08); //Output Direct
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 17  

              #endif
 986   2      
 987   2      #ifdef TFT20_ST7775R
                              LCD_WriteCmdData(0x01, 0x011C); //Output Direct
                              LCD_WriteCmdData(0x03, 0x1030); //Output Direct         
              #endif
 991   2      
 992   2      #ifdef TFT20_ST7775RV
                              LCD_WriteCmdData(0x01, 0x011C); //Output Direct
                              LCD_WriteCmdData(0x03, 0x1030); //Output Direct         
              #endif
 996   2      
 997   2      #ifdef TFT20_ILI9225C           
                              LCD_WriteCmdData(0x0001, 0x011C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
1001   2      
1002   2      #ifdef TFT20_R61503U            
                              LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1030);   //设置彩屏显示方向的寄存器
              #endif
1006   2      
1007   2      #ifdef TFT20_HX8340B            
                              LCD_WriteCmdData(0x01, 0x00); //Output Direct
              #endif
1010   2      
1011   2      #ifdef TFT24_HX8357A            
                              LCD_WriteCmdData(0x16,0x08);
              #endif
1014   2      
1015   2                      tftlcd_data.height=HEIGHT;
1016   2                      tftlcd_data.width=WIDTH;                
1017   2              }
1018   1              else
1019   1              {
1020   2      #ifdef TFT20_HX8309
                      LCD_WriteCmdData(0x0001, 0x001b); //Output Direct
              #endif
1023   2      
1024   2      #ifdef TFT22_R61503B
                      LCD_WriteCmdData(0x0001, 0x0400); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
1028   2      
1029   2      #ifdef TFT22_ILI9225B           
                              LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
1033   2      
1034   2      #ifdef TFT24_ST7781R
                              LCD_WriteCmdData(0x0001, 0x0000); //Output Direct               
                              LCD_WriteCmd(0x0003);   //设置彩屏显示方向的寄存器
                              LCD_WriteData(0x5038);
              #endif
1039   2      
1040   2      #ifdef TFT26_R61509V            
                              LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
1044   2      
1045   2      #ifdef TFT26_ILI9325D           
1046   2                      LCD_WriteCmdData(0x0001, 0x0000); //Output Direct
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 18  

1047   2                      LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
1048   2      #endif
1049   2      
1050   2      #ifdef TFT24_ST7789S            
                              LCD_WriteCmdData(0x36,0x60); ///设置彩屏显示方向的寄存器
              #endif
1053   2      
1054   2      #ifdef TFT24_SSD1297            
                              LCD_WriteCmdData(0x0011, 0x6838); //Output Direct
                              LCD_WriteCmdData(0x0001, 0x6B3F); //Output Direct
              #endif
1058   2      
1059   2      #ifdef TFT20_ILI9225            
                              LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
1063   2      
1064   2      #ifdef TFT20_ILI9341            
                              LCD_WriteCmdData(0x36, 0x68); //Output Direct
              #endif
1067   2      
1068   2      #ifdef TFT20_ST7775R
                              LCD_WriteCmdData(0x01, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x03, 0x1038); //Output Direct
              #endif
1072   2      
1073   2      #ifdef TFT20_ST7775RV
                              LCD_WriteCmdData(0x01, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x03, 0x1038); //Output Direct
              #endif
1077   2      
1078   2      #ifdef TFT20_ILI9225C           
                              LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器#endif
              #endif
1082   2      
1083   2      #ifdef TFT20_R61503U            
                              LCD_WriteCmdData(0x0001, 0x031C); //Output Direct
                              LCD_WriteCmdData(0x0003, 0x1038);   //设置彩屏显示方向的寄存器
              #endif
1087   2      
1088   2      #ifdef TFT20_HX8340B            
                              LCD_WriteCmdData(0x01, 0x00); //Output Direct
              #endif
1091   2      
1092   2      #ifdef TFT24_HX8357A            
                              LCD_WriteCmdData(0x16,0x48);//0x48
              #endif
1095   2      
1096   2                      tftlcd_data.height=WIDTH;
1097   2                      tftlcd_data.width=HEIGHT;
1098   2              }
1099   1      }
1100          
1101          
1102          void TFTLCD_Init(void)
1103          {
1104   1              u16 i=0;
1105   1              TFT_RST=1;  
1106   1              delay_ms(100);
1107   1              
1108   1              TFT_RST=0;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 19  

1109   1              delay_ms(100);
1110   1      
1111   1              TFT_RST=1;
1112   1              delay_ms(100);
1113   1      
1114   1      #ifdef TFT20_HX8309
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData(); 
              #endif
1118   1      
1119   1      #ifdef TFT22_R61503B
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData(); 
              #endif  
1123   1      #ifdef TFT22_ILI9225B   
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1127   1      
1128   1      #ifdef TFT24_ST7781R    
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1132   1      
1133   1      #ifdef TFT26_R61509V    
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1137   1      
1138   1      #ifdef TFT26_ILI9325D   
1139   1              LCD_WriteCmd(0X0000);                           
1140   1              tftlcd_data.id=LCD_ReadData();    
1141   1      #endif
1142   1      
1143   1      #ifdef TFT24_ST7789S
                      LCD_WriteCmd(0xEF);                             
                      tftlcd_data.id=LCD_ReadData(); 
              #endif
1147   1      
1148   1      #ifdef TFT24_SSD1297    
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1152   1      
1153   1      #ifdef TFT20_ILI9225    
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1157   1      
1158   1      #ifdef TFT20_ILI9341    
                      LCD_WriteCmd(0Xd3);                             
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1162   1      
1163   1      #ifdef TFT20_ST7775R    
                      LCD_WriteCmd(0X00);                             
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1167   1      
1168   1      #ifdef TFT20_ST7775RV   
                      LCD_WriteCmd(0X00);                             
                      tftlcd_data.id=LCD_ReadData();    
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 20  

              #endif
1172   1      
1173   1      #ifdef TFT20_ILI9225C   
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1177   1      
1178   1      #ifdef TFT20_R61503U    
                      LCD_WriteCmd(0X0000);                           
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1182   1      
1183   1      #ifdef TFT20_HX8340B    
                      LCD_WriteCmd(0X00);                             
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1187   1      
1188   1      #ifdef TFT24_HX8357A    
                      LCD_WriteCmd(0X00);                             
                      tftlcd_data.id=LCD_ReadData();    
              #endif
1192   1      
1193   1              printf(" LCD ID:%x\r\n",tftlcd_data.id); //打印LCD ID
1194   1              
1195   1      #ifdef TFT20_HX8309
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0011);LCD_WriteData(0x0000);        
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0013);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0011);LCD_WriteData(0x0001); 
                      LCD_WriteCmd(0x0013);LCD_WriteData(0x141c); 
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x0018);
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0044);
                      for(i=5000; i>0; i--);
                      //LCD_WriteCmd(0x0011);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0040);        
                      //LCD_WriteCmd(0x0012);LCD_WriteData(0x0013);  
                      LCD_WriteCmd(0x0013);LCD_WriteData(0x3413);    
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
                      LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);
                      LCD_WriteCmd(0x000b);LCD_WriteData(0x0000);
                      //  LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0023);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0024);LCD_WriteData(0x0000);
                      
                      LCD_WriteCmd(0x0030);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0031);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0032);LCD_WriteData(0x0007);
                      LCD_WriteCmd(0x0033);LCD_WriteData(0x0007);
                      LCD_WriteCmd(0x0034);LCD_WriteData(0x0);
                      LCD_WriteCmd(0x0035);LCD_WriteData(0x0);
                      LCD_WriteCmd(0x0036);LCD_WriteData(0x0);
                      LCD_WriteCmd(0x0037);LCD_WriteData(0x0);
                      LCD_WriteCmd(0x0038);LCD_WriteData(0x0);
                      LCD_WriteCmd(0x0039);LCD_WriteData(0x0);
                      
                      LCD_WriteCmd(0x0001);LCD_WriteData(0x011b); 
                      LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 21  

                      LCD_WriteCmd(0x0003);LCD_WriteData(0x6030);
                      LCD_WriteCmd(0x0004);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0005);LCD_WriteData(0x0000);
                      
                      LCD_WriteCmd(0x0040);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0041);LCD_WriteData(0x00af);
                      
                      LCD_WriteCmd(0x0042);LCD_WriteData(0xdb00);
                      LCD_WriteCmd(0x0043);LCD_WriteData(0xdb00);
                      LCD_WriteCmd(0x0044);LCD_WriteData(0xaf00);
                      LCD_WriteCmd(0x0045);LCD_WriteData(0xdb00);
                      
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x4040);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0005);
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0025);
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0027);
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0037);
                      for(i=5000; i>0; i--);
                      LCD_WriteCmd(0x0022);
              #endif
1256   1      
1257   1      #ifdef TFT22_R61503B
                      
                        LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);
                delay_10us(10);
                LCD_WriteCmd(0x0007);LCD_WriteCmd(0x0000);
                LCD_WriteCmd(0x0012);LCD_WriteCmd(0x0000);
                LCD_WriteCmd(0x00a4);LCD_WriteCmd(0x0001);
                delay_10us(10);
                LCD_WriteCmd(0x0070);LCD_WriteData(0x9b00);
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0031);
                LCD_WriteCmd(0x0018);LCD_WriteData(0x0001);
                
                LCD_WriteCmd(0x0010);LCD_WriteData(0x11b0); 
                LCD_WriteCmd(0x0011);LCD_WriteData(0x0007);        
                LCD_WriteCmd(0x0012);LCD_WriteData(0x1017);  
                LCD_WriteCmd(0x0013);LCD_WriteData(0x850d); 
                LCD_WriteCmd(0x0014);LCD_WriteData(0x8000); 
                LCD_WriteCmd(0x0012);LCD_WriteData(0x103c);  
                Delay(150);
                
                
                LCD_WriteCmd(0x0001);LCD_WriteData(0x0500);
                LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
                LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);
                
                LCD_WriteCmd(0x0008);LCD_WriteData(0x0808);
                LCD_WriteCmd(0x000b);LCD_WriteData(0x1100);
                LCD_WriteCmd(0x000c);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x000f);LCD_WriteData(0x1401);
                
                LCD_WriteCmd(0x0015);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0020);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0021);LCD_WriteData(0x0000);
              
              //  LCD_WriteCmd(0x0030);LCD_WriteData(0x0f0f);
              //  LCD_WriteCmd(0x0031);LCD_WriteData(0x0a0b);
              //  LCD_WriteCmd(0x0032);LCD_WriteData(0x0c0e);
              //  LCD_WriteCmd(0x0033);LCD_WriteData(0x0d0d);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 22  

              //  LCD_WriteCmd(0x0034);LCD_WriteData(0x0a0a);
              //  LCD_WriteCmd(0x0035);LCD_WriteData(0x0909);
              //  LCD_WriteCmd(0x0036);LCD_WriteData(0x0c0c);
              //  LCD_WriteCmd(0x0037);LCD_WriteData(0x0f0c);
              //  LCD_WriteCmd(0x0038);LCD_WriteData(0x0606);
              //  LCD_WriteCmd(0x0039);LCD_WriteData(0x0606);
              
                LCD_WriteCmd(0x0050);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0051);LCD_WriteData(0x00af);
                LCD_WriteCmd(0x0052);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0053);LCD_WriteData(0x00db);
                
                LCD_WriteCmd(0x0070);LCD_WriteData(0x1b00);
                LCD_WriteCmd(0x0071);LCD_WriteData(0x0000);
                
                LCD_WriteCmd(0x0090);LCD_WriteData(0x0000);
                LCD_WriteCmd(0x0091);LCD_WriteData(0x0100);
                LCD_WriteCmd(0x0092);LCD_WriteData(0x0001);
                LCD_WriteCmd(0x0059);LCD_WriteData(0x050c);
                LCD_WriteCmd(0x0090);LCD_WriteData(0x0010);
                LCD_WriteCmd(0x0092);LCD_WriteData(0x0600);
              
                LCD_WriteCmd(0x0007);LCD_WriteData(0x0233);
                Delay(50);
              //  LCD_WriteCmd(0x0007);LCD_WriteData(0x0133);
              //  Delay(50);
              
                LCD_WriteCmd(0x0022);
              #endif  
1324   1      
1325   1               
1326   1      #ifdef TFT22_ILI9225B
                      LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                      LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                      LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                      LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                      LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
             -16Bit
                      LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                      LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                      LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                      //*************Power On sequence ****************//
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                      LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                      LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                      LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                      //------------- Set GRAM area ------------------//
                      LCD_WriteCmdData(0x0030, 0x0000);
                      LCD_WriteCmdData(0x0031, 0x00DB);
                      LCD_WriteCmdData(0x0032, 0x0000);
                      LCD_WriteCmdData(0x0033, 0x0000);
                      LCD_WriteCmdData(0x0034, 0x00DB);
                      LCD_WriteCmdData(0x0035, 0x0000);
                      LCD_WriteCmdData(0x0036, 0x00AF);
                      LCD_WriteCmdData(0x0037, 0x0000);
                      LCD_WriteCmdData(0x0038, 0x00DB);
                      LCD_WriteCmdData(0x0039, 0x0000);
                      
                      // ----------- Adjust the Gamma Curve ----------//
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 23  

                      LCD_WriteCmdData(0x0050, 0x0000);
                      LCD_WriteCmdData(0x0051, 0x0704);
                      LCD_WriteCmdData(0x0052, 0x0C08);
                      LCD_WriteCmdData(0x0053, 0x0502);
                      LCD_WriteCmdData(0x0054, 0x080C);
                      LCD_WriteCmdData(0x0055, 0x0407);
                      LCD_WriteCmdData(0x0056, 0x0000);
                      LCD_WriteCmdData(0x0057, 0x0205);
                      LCD_WriteCmdData(0x0058, 0x0000);
                      LCD_WriteCmdData(0x0059, 0x0000);
                      
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0007, 0x1017);
              
              #endif
1371   1      
1372   1      #ifdef TFT24_ST7781R
                      //ST7781R_HSD2.4
                      //------------------------------------Display Control Setting--------------------------------------------
             ---//
                      LCD_WriteCmdData(0x0001, 0x0100); //Output Direct
                      LCD_WriteCmdData(0x0002, 0x0700); //Line Inversion
                      LCD_WriteCmdData(0x0003, 0x5030); //Entry Mode (262K, BGR)
                      LCD_WriteCmdData(0x0004, 0x0000); //Resize Control
                      LCD_WriteCmdData(0x0008, 0x0302); //Display Control2 (Porch Setting)
                      LCD_WriteCmdData(0x0009, 0x0000); //Display Control3
                      LCD_WriteCmdData(0x000A, 0x0000); //Display Control4
                      LCD_WriteCmdData(0x000C, 0x0000); // RGB Display Interface Control1
                      LCD_WriteCmdData(0x000D, 0x0000); //Frame Marker Position
                      LCD_WriteCmdData(0x000F, 0x0000); // RGB Display Interface Control2
                      //-----------------------------------End Display Control setting-----------------------------------------
             -//
                      delay_ms(100);
                      //-------------------------------- Power Control Registers Initial --------------------------------------
             -//
                      LCD_WriteCmdData(0x0010, 0x10E0); //Power Control1
                      //---------------------------------End Power Control Registers Initial -------------------------------//
                      delay_ms(100); //Delay 100ms
                      //-------------------------------------Gamma Cluster Setting-------------------------------------------//
                      LCD_WriteCmdData(0x0030, 0x0000);
                      LCD_WriteCmdData(0x0031, 0x0406);
                      LCD_WriteCmdData(0x0032, 0x0302);
                      LCD_WriteCmdData(0x0035, 0x0006);
                      LCD_WriteCmdData(0x0036, 0x0700);
                      LCD_WriteCmdData(0x0037, 0x0000);
                      LCD_WriteCmdData(0x0038, 0x0406);
                      LCD_WriteCmdData(0x0039, 0x0302);
                      LCD_WriteCmdData(0x003c, 0x0006);
                      LCD_WriteCmdData(0x003d, 0x0700);
                      //---------------------------------------End Gamma Setting---------------------------------------------//
                      //----------------------------------Display Windows 240 X 320----------------------------------------//
                      LCD_WriteCmdData(0x0020, 0x0000); // Horizontal Address Start Position
                      LCD_WriteCmdData(0x0021, 0x0000); // Vertical Address Start Position
                      LCD_WriteCmdData(0x0050, 0x0000); // Horizontal Address Start Position
                      LCD_WriteCmdData(0x0051, 0x00ef); // Horizontal Address End Position
                      LCD_WriteCmdData(0x0052, 0x0000); // Vertical Address Start Position
                      LCD_WriteCmdData(0x0053, 0x013f); // Vertical Address End Position
                      //----------------------------------End Display Windows 240 X 320----------------------------------//
                      //-------------------------------------------Frame Rate Setting------------------------------------------
             --//
                      LCD_WriteCmdData(0x0060, 0xA700); //Gate scan control
                      LCD_WriteCmdData(0x0061, 0x0001); //Non-display Area setting
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 24  

                      LCD_WriteCmdData(0x006A, 0x0000); //Vertical Scroll Control
                      LCD_WriteCmdData(0x0090, 0x0030); //RTNI setting
                      LCD_WriteCmdData(0x0095, 0x021E); //Panel Interface Control 4
                      //-------------------------------------------END Frame Rate setting------------------------------------//
                      //----------------------------------Partial Image Display Initial----------------------------------------
             -//
                      LCD_WriteCmdData(0x0080, 0x0000); // Partial Image 1 Display Position
                      LCD_WriteCmdData(0x0081, 0x0000); // Partial Image 1 Area (Start Line)
                      LCD_WriteCmdData(0x0082, 0x0000); // Partial Image 1 Area (End Line)
                      LCD_WriteCmdData(0x0083, 0x0000); // Partial Image 2 Display Position
                      LCD_WriteCmdData(0x0084, 0x0000); // Partial Image 2 Area (Start Line)
                      LCD_WriteCmdData(0x0085, 0x0000); // Partial Image 2 Area (End Line)
                      //-----------------------------------END Partial Image Display Initial ----------------------------------
             -//
                      //--------------------------------- Power Supply Startup 1 Setting------------------------------------//
                      LCD_WriteCmdData(0x00FF, 0x0001); //CMD 2 Enable
                      LCD_WriteCmdData(0x00B0, 0x310E); //Power Control2
                      LCD_WriteCmdData(0x00FF, 0x0000); // CMD 2 Disable
                      //--------------------------------- End Power Supply Startup 2 Setting------------------------------//
                      delay_ms(100); //Delay 100ms
                      LCD_WriteCmdData(0x0007, 0x0133); //Display Control1
                      delay_ms(50); //Delay 50ms
                      
                      LCD_WriteCmd(0x0022);
              #endif
1437   1      
1438   1      #ifdef TFT26_R61509V
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0000);  
                      delay_ms(100);
                      
                      LCD_WriteCmd(0x0400);LCD_WriteData(0x6200); 
                      LCD_WriteCmd(0x0008);LCD_WriteData(0x0808); 
                       
                      LCD_WriteCmd(0x0300);LCD_WriteData(0x0C00);  
                      LCD_WriteCmd(0x0301);LCD_WriteData(0x5A0B);  
                      LCD_WriteCmd(0x0302);LCD_WriteData(0x0906); 
                      LCD_WriteCmd(0x0303);LCD_WriteData(0x1017);  
                      LCD_WriteCmd(0x0304);LCD_WriteData(0x2300);  
                      LCD_WriteCmd(0x0305);LCD_WriteData(0x1700);  
                      LCD_WriteCmd(0x0306);LCD_WriteData(0x6309); 
                      LCD_WriteCmd(0x0307);LCD_WriteData(0x0C09); 
                      LCD_WriteCmd(0x0308);LCD_WriteData(0x010C);  
                      LCD_WriteCmd(0x0309);LCD_WriteData(0x2232); 
                      
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0016);  
                      LCD_WriteCmd(0x0011);LCD_WriteData(0x0101);  
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0013);LCD_WriteData(0x0001); 
                       
                      LCD_WriteCmd(0x0100);LCD_WriteData(0x0330);  
                      LCD_WriteCmd(0x0101);LCD_WriteData(0x0336);  
                      LCD_WriteCmd(0x0103);LCD_WriteData(0x1000); 
                       
                      LCD_WriteCmd(0x0280);LCD_WriteData(0x6100); 
                      LCD_WriteCmd(0x0102);LCD_WriteData(0xBBB4); 
                      delay_ms(100);
                      
                      LCD_WriteCmd(0x0001);LCD_WriteData(0x0100);  
                      LCD_WriteCmd(0x0002);LCD_WriteData(0x0100);  
                      LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);  
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 25  

                      LCD_WriteCmd(0x0009);LCD_WriteData(0x0001);  
                      LCD_WriteCmd(0x000C);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0090);LCD_WriteData(0x0800); 
                      LCD_WriteCmd(0x000F);LCD_WriteData(0x0000); 
                      
                      LCD_WriteCmd(0x0210);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0211);LCD_WriteData(0x00EF); 
                      LCD_WriteCmd(0x0212);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0213);LCD_WriteData(0x018F);         //;400
                      
                      
                      LCD_WriteCmd(0x0500);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0501);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0502);LCD_WriteData(0x005F);  
                      
                      LCD_WriteCmd(0x0401);LCD_WriteData(0x0001);  
                      LCD_WriteCmd(0x0404);LCD_WriteData(0x0000); 
                      delay_ms(100);
                      
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0100); 
                      delay_ms(100);
                              
                      LCD_WriteCmd(0x0202);
              #endif
1498   1      
1499   1      #ifdef TFT26_ILI9325D
1500   1              //************* Start Initial Sequence **********// 
1501   1              LCD_WriteCmdData(0x0001, 0x0100); // set SS  and SM bit 
1502   1              LCD_WriteCmdData(0x0002, 0x0200); // set 1 line inversion 
1503   1              LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1. 
1504   1              LCD_WriteCmdData(0x0004, 0x0000); // Resize register 
1505   1              LCD_WriteCmdData(0x0008, 0x0202); // set theback porch and front porch 
1506   1              LCD_WriteCmdData(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0] 
1507   1              LCD_WriteCmdData(0x000A, 0x0000); // FMARK function 
1508   1              LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting 
1509   1              LCD_WriteCmdData(0x000D, 0x0000); // Frame marker Position 
1510   1              LCD_WriteCmdData(0x000F, 0x0000); // RGB int erface polarity 
1511   1              //*************Power On sequence **************** // 
1512   1              LCD_WriteCmdData(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB 
1513   1              LCD_WriteCmdData(0x0011, 0x0007); // DC1[2:0 ], DC0[2:0], VC[2:0] 
1514   1              LCD_WriteCmdData(0x0012, 0x0000); // VREG1OUT voltage 
1515   1              LCD_WriteCmdData(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude 
1516   1              delay_ms(10);                         // Dis-charge capacitor power voltage 
1517   1              LCD_WriteCmdData(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB 
1518   1              LCD_WriteCmdData(0x0011, 0x0227); // R11h=0x 0221 at VCI=3.3V, DC1[2:0], DC0[2:0], VC[2:0] 
1519   1              delay_ms(10);                          // Delay 50ms 
1520   1              LCD_WriteCmdData(0x0012, 0x008D); // External reference voltage= Vci; 
1521   1              delay_ms(10);                          // Delay 50ms 
1522   1              LCD_WriteCmdData(0x0013, 0x1200); // VDV[4:0] for VCOM amplitude 
1523   1              LCD_WriteCmdData(0x0029, 0x0005); // VCM[5:0] for VCOMH 
1524   1              LCD_WriteCmdData(0x002B, 0x000C); // Frame Rate = 91Hz 
1525   1              delay_ms(10);                          // Delay 50ms 
1526   1              LCD_WriteCmdData(0x0020, 0x0000); // GRAM horizontal Address 
1527   1              LCD_WriteCmdData(0x0021, 0x0000); // GRAM Vertical Address 
1528   1              // ----------- Adjust the Gamma Curve ----------// 
1529   1              //a-Si TFT LCD Single Chip Driver 
1530   1              //240RGBx320 Resolution and 262K color  ILI9325D
1531   1              //The information contained herein is the exclusive property of ILI Technology Corp. and shall not be dis
             -tributed, reproduced, or disclosed in 
1532   1              //whole or in part without prior written permission of ILI Technology Corp.
1533   1              //Page 24 of 26  V0.14
1534   1              LCD_WriteCmdData(0x0030, 0x0000); 
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 26  

1535   1              LCD_WriteCmdData(0x0031, 0x0303); 
1536   1              LCD_WriteCmdData(0x0032, 0x0103); 
1537   1              LCD_WriteCmdData(0x0035, 0x0103); 
1538   1              LCD_WriteCmdData(0x0036, 0x0004); 
1539   1              LCD_WriteCmdData(0x0037, 0x0406); 
1540   1              LCD_WriteCmdData(0x0038, 0x0404); 
1541   1              LCD_WriteCmdData(0x0039, 0x0707); 
1542   1              LCD_WriteCmdData(0x003C, 0x0301); 
1543   1              LCD_WriteCmdData(0x003D, 0x0004); 
1544   1              //------------------ Set GRAM area ---------------// 
1545   1              LCD_WriteCmdData(0x0050, 0x0000); // Horizontal GRAM Start Address 
1546   1              LCD_WriteCmdData(0x0051, 0x00EF); // Horizontal GRAM End Address 
1547   1              LCD_WriteCmdData(0x0052, 0x0000); // Vertical GRAM Start Address 
1548   1              LCD_WriteCmdData(0x0053, 0x013F); // Vertical GRAM Start Address 
1549   1              LCD_WriteCmdData(0x0060, 0xA700); // Gate Sc an Line 
1550   1              LCD_WriteCmdData(0x0061, 0x0001); // NDL,VLE, REV 
1551   1              LCD_WriteCmdData(0x006A, 0x0000); // set scrolling line 
1552   1              //-------------- Partial Display Control ---------// 
1553   1              LCD_WriteCmdData(0x0080, 0x0000); 
1554   1              LCD_WriteCmdData(0x0081, 0x0000); 
1555   1              LCD_WriteCmdData(0x0082, 0x0000); 
1556   1              LCD_WriteCmdData(0x0083, 0x0000); 
1557   1              LCD_WriteCmdData(0x0084, 0x0000); 
1558   1              LCD_WriteCmdData(0x0085, 0x0000); 
1559   1              //-------------- Panel Control -------------------// 
1560   1              LCD_WriteCmdData(0x0090, 0x0010); 
1561   1              LCD_WriteCmdData(0x0092, 0x0600); 
1562   1              LCD_WriteCmdData(0x0007, 0x0133); // 262K color and display ON 
1563   1              
1564   1              LCD_WriteCmd(0x0022);
1565   1      #endif
1566   1      
1567   1      #ifdef TFT24_ST7789S
                      LCD_WriteCmd(0x11); 
                      delay_ms(120); //Delay 120ms 
                      //ST7789S Frame rate setting 
                      LCD_WriteCmd(0xb2); 
                      LCD_WriteData(0x0c); 
                      LCD_WriteData(0x0c); 
                      LCD_WriteData(0x00); 
                      LCD_WriteData(0x33); 
                      LCD_WriteData(0x33); 
                      LCD_WriteCmd(0xb7); 
                      LCD_WriteData(0x35); 
                      //ST7789S Power setting 
                      LCD_WriteCmd(0xbb); 
                      LCD_WriteData(0x35); 
                      LCD_WriteCmd(0xc0); 
                      LCD_WriteData(0x2c); 
                      LCD_WriteCmd(0xc2); 
                      LCD_WriteData(0x01); 
                      LCD_WriteCmd(0xc3); 
                      LCD_WriteData(0x0b); 
                      LCD_WriteCmd(0xc4); 
                      LCD_WriteData(0x20); 
                      LCD_WriteCmd(0xc6); 
                      LCD_WriteData(0x0f); 
                      LCD_WriteCmd(0xca); 
                      LCD_WriteData(0x0f); 
                      LCD_WriteCmd(0xc8); 
                      LCD_WriteData(0x08); 
                      LCD_WriteCmd(0x55); 
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 27  

                      LCD_WriteData(0x90); 
                      LCD_WriteCmd(0xd0); 
                      LCD_WriteData(0xa4); 
                      LCD_WriteData(0xa1); 
                      
                      LCD_WriteCmd(0x3A);
                      LCD_WriteData(0x05);
                      
                      //LCD_WriteCmd(0x36);
                      //LCD_WriteData(0x10);
                      
                      //ST7789S gamma setting 
                      LCD_WriteCmd(0xe0); 
                      LCD_WriteData(0xd0); 
                      LCD_WriteData(0x00); 
                      LCD_WriteData(0x02); 
                      LCD_WriteData(0x07); 
                      LCD_WriteData(0x0b); 
                      LCD_WriteData(0x1a); 
                      LCD_WriteData(0x31); 
                      LCD_WriteData(0x54); 
                      LCD_WriteData(0x40); 
                      LCD_WriteData(0x29); 
                      LCD_WriteData(0x12); 
                      LCD_WriteData(0x12); 
                      LCD_WriteData(0x12); 
                      LCD_WriteData(0x17); 
                      LCD_WriteCmd(0xe1); 
                      LCD_WriteData(0xd0); 
                      LCD_WriteData(0x00); 
                      LCD_WriteData(0x02); 
                      LCD_WriteData(0x07); 
                      LCD_WriteData(0x05); 
                      LCD_WriteData(0x25); 
                      LCD_WriteData(0x2d); 
                      LCD_WriteData(0x44); 
                      LCD_WriteData(0x45); 
                      LCD_WriteData(0x1c); 
                      LCD_WriteData(0x18); 
                      LCD_WriteData(0x16); 
                      LCD_WriteData(0x1c); 
                      
                      LCD_WriteData(0x1d); 
                      LCD_WriteCmd(0x29);
              #endif
1642   1      
1643   1      #ifdef TFT24_SSD1297 
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0001);//打开晶振
                      delay_ms(500);
                      
                      LCD_WriteCmd(0x0003);LCD_WriteData(0x0003);//0xA8A4
                      LCD_WriteCmd(0x000C);LCD_WriteData(0x0000);    
                      LCD_WriteCmd(0x000D);LCD_WriteData(0x080C);   
                      LCD_WriteCmd(0x000E);LCD_WriteData(0x2b000);//2B00    
                      LCD_WriteCmd(0x001E);LCD_WriteData(0x00B0); 
                      delay_ms(500);
                      
                      LCD_WriteCmd(0x0001);LCD_WriteData(0x693F);//驱动输出控制320*240  0x6B3F        0x2B3F
                      LCD_WriteCmd(0x0002);LCD_WriteData(0x0600);
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0011);LCD_WriteData(0x6830); //定义数据格式  16位色      横屏 0x6058   0x6078
                      LCD_WriteCmd(0x0005);LCD_WriteData(0x0000);  
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 28  

                      LCD_WriteCmd(0x0006);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0016);LCD_WriteData(0xEF1C);  
                      LCD_WriteCmd(0x0017);LCD_WriteData(0x0003);  
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0233); //0x0233       
                      LCD_WriteCmd(0x000B);LCD_WriteData(0x0000);  
                      delay_ms(500);
                      
                      LCD_WriteCmd(0x000F);LCD_WriteData(0x0000); //扫描开始地址
                      LCD_WriteCmd(0x0041);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0042);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0048);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0049);LCD_WriteData(0x013F);  
                      LCD_WriteCmd(0x004A);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x004B);LCD_WriteData(0x0000); 
                       
                      LCD_WriteCmd(0x0044);LCD_WriteData(0xEF00);  
                      LCD_WriteCmd(0x0045);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0046);LCD_WriteData(0x013F); 
                       
                      LCD_WriteCmd(0x0030);LCD_WriteData(0x0707);  
                      LCD_WriteCmd(0x0031);LCD_WriteData(0x0204);  
                      LCD_WriteCmd(0x0032);LCD_WriteData(0x0204);  
                      LCD_WriteCmd(0x0033);LCD_WriteData(0x0502);  
                      LCD_WriteCmd(0x0034);LCD_WriteData(0x0507);  
                      LCD_WriteCmd(0x0035);LCD_WriteData(0x0204);  
                      LCD_WriteCmd(0x0036);LCD_WriteData(0x0204);  
                      LCD_WriteCmd(0x0037);LCD_WriteData(0x0502);  
                      LCD_WriteCmd(0x003A);LCD_WriteData(0x0302);  
                      LCD_WriteCmd(0x003B);LCD_WriteData(0x0302);  
                      LCD_WriteCmd(0x0023);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0024);LCD_WriteData(0x0000);  
                      LCD_WriteCmd(0x0025);LCD_WriteData(0x8000);  
                      
                      LCD_WriteCmd(0x004f);LCD_WriteData(0x0000);        //行首址0
                      LCD_WriteCmd(0x004e);LCD_WriteData(0x0000);        //列首址0
              
                      LCD_WriteCmd(0x0022);
              #endif
1697   1      
1698   1      #ifdef TFT20_ILI9225
                      LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                      LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                      LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                      LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                      LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
             -16Bit
                      LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                      LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                      LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                      //*************Power On sequence ****************//
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                      LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                      LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                      LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                      //------------- Set GRAM area ------------------//
                      LCD_WriteCmdData(0x0030, 0x0000);
                      LCD_WriteCmdData(0x0031, 0x00DB);
                      LCD_WriteCmdData(0x0032, 0x0000);
                      LCD_WriteCmdData(0x0033, 0x0000);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 29  

                      LCD_WriteCmdData(0x0034, 0x00DB);
                      LCD_WriteCmdData(0x0035, 0x0000);
                      LCD_WriteCmdData(0x0036, 0x00AF);
                      LCD_WriteCmdData(0x0037, 0x0000);
                      LCD_WriteCmdData(0x0038, 0x00DB);
                      LCD_WriteCmdData(0x0039, 0x0000);
                      
                      // ----------- Adjust the Gamma Curve ----------//
                      LCD_WriteCmdData(0x0050, 0x0000);
                      LCD_WriteCmdData(0x0051, 0x0704);
                      LCD_WriteCmdData(0x0052, 0x0C08);
                      LCD_WriteCmdData(0x0053, 0x0502);
                      LCD_WriteCmdData(0x0054, 0x080C);
                      LCD_WriteCmdData(0x0055, 0x0407);
                      LCD_WriteCmdData(0x0056, 0x0000);
                      LCD_WriteCmdData(0x0057, 0x0205);
                      LCD_WriteCmdData(0x0058, 0x0000);
                      LCD_WriteCmdData(0x0059, 0x0000);
                      
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0007, 0x1017);
              
              #endif
1743   1      
1744   1      #ifdef TFT20_ILI9341
                      LCD_WriteCmd(0xCB);  
                      LCD_WriteData(0x39); 
                      LCD_WriteData(0x2C); 
                      LCD_WriteData(0x00); 
                      LCD_WriteData(0x34);  
                      LCD_WriteData(0x02);   
              
                      LCD_WriteCmd(0xCF);  
                      LCD_WriteData (0x00); 
                      LCD_WriteData (0xa2); //c1
                      LCD_WriteData (0Xf0);  //30
                       
                      LCD_WriteCmd(0xE8);  
                      LCD_WriteData (0x84);    //85
                      LCD_WriteData (0x11);    //00
                      LCD_WriteData (0x7a);    //79
              
                      
                      LCD_WriteCmd(0xEA);  
                      LCD_WriteData (0x66);  //00
                      LCD_WriteData (0x00); 
                      
                      LCD_WriteCmd(0xED);  
                      LCD_WriteData (0x55);   //64
                      LCD_WriteData (0x01);   //03
                      LCD_WriteData (0X23);   //12
                      LCD_WriteData (0X01);   //81
                       
                      LCD_WriteCmd(0xF7);  
                      LCD_WriteData (0x20);   //20
              
                      
                      LCD_WriteCmd(0xC0);    //Power control 
                      LCD_WriteData (0x1c);   //VRH[5:0]      //1c
              
                      LCD_WriteCmd(0xC1);    //Power control 
                      LCD_WriteData (0x13);   //SAP[2:0];BT[3:0]      //13
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 30  

                       
                      LCD_WriteCmd(0xC5);    //VCM control 
                      LCD_WriteData (0x23); 
                      LCD_WriteData (0x3F); 
               
                      LCD_WriteCmd(0xC7);    //VCM control2 
                      LCD_WriteData(0xA5); 
                      
                      LCD_WriteCmd(0xB1);  
                      LCD_WriteData (0x00); 
                      LCD_WriteData (0x17); 
                      
                      LCD_WriteCmd(0x3A);  
                      LCD_WriteData (0x55); 
                      
                      LCD_WriteCmd(0xB6);  
                      LCD_WriteData (0x0A);
                      LCD_WriteData (0xa2);  //a2
                      LCD_WriteData (0x27);
                      LCD_WriteData (0x00); 
                       
                      LCD_WriteCmd(0x36);    // Memory Access Control 
                      LCD_WriteData (0x08);     //08  BGR
              
                      LCD_WriteCmd(0xF2);    // 3Gamma Function Disable 
                      LCD_WriteData (0x02);   //00
                       
                      LCD_WriteCmd(0x26);    //Gamma curve selected 
                      LCD_WriteData (0x01); 
                       
                      LCD_WriteCmd(0xE0);    //Set Gamma 
                      LCD_WriteData (0x0F); 
                      LCD_WriteData (0x14); 
                      LCD_WriteData (0x13); 
                      LCD_WriteData (0x0C); 
                      LCD_WriteData (0x0E); 
                      LCD_WriteData (0x05); 
                      LCD_WriteData (0x45); 
                      LCD_WriteData (0x85); 
                      LCD_WriteData (0x36); 
                      LCD_WriteData (0x09); 
                      LCD_WriteData (0x14); 
                      LCD_WriteData (0x05); 
                      LCD_WriteData (0x09); 
                      LCD_WriteData (0x03); 
                      LCD_WriteData (0x00); 
               
                      LCD_WriteCmd(0XE1);    //Set Gamma 
                      LCD_WriteData (0x00); 
                      LCD_WriteData (0x24); 
                      LCD_WriteData (0x26); 
                      LCD_WriteData (0x03); 
                      LCD_WriteData (0x0F); 
                      LCD_WriteData (0x04); 
                      LCD_WriteData (0x3F); 
                      LCD_WriteData (0x14); 
                      LCD_WriteData (0x52); 
                      LCD_WriteData (0x04); 
                      LCD_WriteData (0x10); 
                      LCD_WriteData (0x0E); 
                      LCD_WriteData (0x38); 
                      LCD_WriteData (0x39); 
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 31  

                      LCD_WriteData (0x0F); 
              
                      LCD_WriteCmd(0x2A );
                      LCD_WriteData(0x00);
                      LCD_WriteData(0x00);
                      LCD_WriteData(0x00);
                      LCD_WriteData(0xEF);
              
                      LCD_WriteCmd(0x2B );
                      LCD_WriteData(0x00);
                      LCD_WriteData(0x00);
                      LCD_WriteData(0x01);
                      LCD_WriteData(0x3F);
                       
                      LCD_WriteCmd(0x11);    //Exit Sleep 
                      Delay(120); 
                      delay_ms(50);
                      LCD_WriteCmd(0x29);    //Display on
              #endif
1863   1      
1864   1      #ifdef TFT20_ST7775R
                      LCD_WriteCmd(0xd0);LCD_WriteData(0x0003); // set SS and NL bit
                      LCD_WriteCmd(0xeb);LCD_WriteData(0x0b00); // set 1 line inversion
                      LCD_WriteCmd(0xec);LCD_WriteData(0x000f); // set GRAM write direction and 
                      LCD_WriteCmd(0xc7);LCD_WriteData(0x030f); // set GRAM write direction and 
                      LCD_WriteCmd(0x01);LCD_WriteData(0x011C); // set SS and NL bit
                      LCD_WriteCmd(0x02);LCD_WriteData(0x0100); // set 1 line inversion
                      LCD_WriteCmd(0x03);LCD_WriteData(0x1030); // 
                      LCD_WriteCmd(0x07);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x08);LCD_WriteData(0x0808); // 
                      LCD_WriteCmd(0x0F);LCD_WriteData(0x0601); // 
                      
                      LCD_WriteCmd(0x10);LCD_WriteData(0x0A00); // 
                      LCD_WriteCmd(0x11);LCD_WriteData(0x1B41); // 
                      Delay(50); 
                      LCD_WriteCmd(0x12);LCD_WriteData(0x200E); // 
                      LCD_WriteCmd(0x13);LCD_WriteData(0x0020); // Set GVDD 52 30
                      LCD_WriteCmd(0x14);LCD_WriteData(0x4A5F); // Set VCOMH/VCOML voltage 5f60
                      
                      LCD_WriteCmd(0x30);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x31);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x32);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x33);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x34);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x35);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x36);LCD_WriteData(0x00AF);
                      LCD_WriteCmd(0x37);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x38);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x39);LCD_WriteData(0x0000);
                      
                      LCD_WriteCmd(0x50);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x51);LCD_WriteData(0x0803);
                      LCD_WriteCmd(0x52);LCD_WriteData(0x0C07);
                      LCD_WriteCmd(0x53);LCD_WriteData(0x0501);
                      LCD_WriteCmd(0x54);LCD_WriteData(0x070C);
                      LCD_WriteCmd(0x55);LCD_WriteData(0x0308);
                      LCD_WriteCmd(0x56);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x57);LCD_WriteData(0x0105);
                      LCD_WriteCmd(0x58);LCD_WriteData(0x1100);
                      LCD_WriteCmd(0x59);LCD_WriteData(0x0011);
                      
                      LCD_WriteCmd(0x20);LCD_WriteData(0x0000); // Set GRAM Address
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 32  

                      LCD_WriteCmd(0x21);LCD_WriteData(0x0000); // Set GRAM Address
                      
                      
                      LCD_WriteCmd(0x07);LCD_WriteData(0x1017);
                      LCD_WriteCmd(0x22);
              #endif
1912   1      
1913   1      #ifdef TFT20_ST7775RV
                      LCD_WriteCmd(0xd0);LCD_WriteData(0x0003); // set SS and NL bit
                      LCD_WriteCmd(0xeb);LCD_WriteData(0x0b00); // set 1 line inversion
                      LCD_WriteCmd(0xec);LCD_WriteData(0x000f); // set GRAM write direction and 
                      LCD_WriteCmd(0xc7);LCD_WriteData(0x030f); // set GRAM write direction and 
                      LCD_WriteCmd(0x01);LCD_WriteData(0x011C); // set SS and NL bit
                      LCD_WriteCmd(0x02);LCD_WriteData(0x0100); // set 1 line inversion
                      LCD_WriteCmd(0x03);LCD_WriteData(0x1030); // 
                      LCD_WriteCmd(0x07);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x08);LCD_WriteData(0x0808); // 
                      LCD_WriteCmd(0x0F);LCD_WriteData(0x0601); // 
                      
                      LCD_WriteCmd(0x10);LCD_WriteData(0x0A00); // 
                      LCD_WriteCmd(0x11);LCD_WriteData(0x1B41); // 
                      Delay(50); 
                      LCD_WriteCmd(0x12);LCD_WriteData(0x200E); // 
                      LCD_WriteCmd(0x13);LCD_WriteData(0x0020); // Set GVDD 52 30
                      LCD_WriteCmd(0x14);LCD_WriteData(0x4A5F); // Set VCOMH/VCOML voltage 5f60
                      
                      LCD_WriteCmd(0x30);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x31);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x32);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x33);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x34);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x35);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x36);LCD_WriteData(0x00AF);
                      LCD_WriteCmd(0x37);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x38);LCD_WriteData(0x00DB);
                      LCD_WriteCmd(0x39);LCD_WriteData(0x0000);
                      
                      LCD_WriteCmd(0x50);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x51);LCD_WriteData(0x0803);
                      LCD_WriteCmd(0x52);LCD_WriteData(0x0C07);
                      LCD_WriteCmd(0x53);LCD_WriteData(0x0501);
                      LCD_WriteCmd(0x54);LCD_WriteData(0x070C);
                      LCD_WriteCmd(0x55);LCD_WriteData(0x0308);
                      LCD_WriteCmd(0x56);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x57);LCD_WriteData(0x0105);
                      LCD_WriteCmd(0x58);LCD_WriteData(0x1100);
                      LCD_WriteCmd(0x59);LCD_WriteData(0x0011);
                      
                      LCD_WriteCmd(0x20);LCD_WriteData(0x0000); // Set GRAM Address
                      LCD_WriteCmd(0x21);LCD_WriteData(0x0000); // Set GRAM Address
                      
                      
                      LCD_WriteCmd(0x07);LCD_WriteData(0x1017);
                      LCD_WriteCmd(0x22);
              #endif
1961   1      
1962   1      #ifdef TFT20_ILI9225C
                      LCD_WriteCmdData(0x0001, 0x011C); // set SS and NL bit
                      LCD_WriteCmdData(0x0002, 0x0100); // set 1 line inversion
                      LCD_WriteCmdData(0x0003, 0x1030); // set GRAM write direction and BGR=1.
                      LCD_WriteCmdData(0x0008, 0x0808); // set BP and FP
                      LCD_WriteCmdData(0x000C, 0x0000); // RGB interface setting R0Ch=0x0110 for RGB 18Bit and R0Ch=0111for RGB
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 33  

             -16Bit
                      LCD_WriteCmdData(0x000F, 0x0B01); // Set frame rate
                      LCD_WriteCmdData(0x0020, 0x0000); // Set GRAM Address
                      LCD_WriteCmdData(0x0021, 0x0000); // Set GRAM Address
                      //*************Power On sequence ****************//
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0010, 0x0A00); // Set SAP,DSTB,STB
                      LCD_WriteCmdData(0x0011, 0x1038); // Set APON,PON,AON,VCI1EN,VC
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0012, 0x2121); // Internal reference voltage= Vci;
                      LCD_WriteCmdData(0x0013, 0x007A); // Set GVDD
                      LCD_WriteCmdData(0x0014, 0x595c); // Set VCOMH/VCOML voltage      
                      //------------- Set GRAM area ------------------//
                      LCD_WriteCmdData(0x0030, 0x0000);
                      LCD_WriteCmdData(0x0031, 0x00DB);
                      LCD_WriteCmdData(0x0032, 0x0000);
                      LCD_WriteCmdData(0x0033, 0x0000);
                      LCD_WriteCmdData(0x0034, 0x00DB);
                      LCD_WriteCmdData(0x0035, 0x0000);
                      LCD_WriteCmdData(0x0036, 0x00AF);
                      LCD_WriteCmdData(0x0037, 0x0000);
                      LCD_WriteCmdData(0x0038, 0x00DB);
                      LCD_WriteCmdData(0x0039, 0x0000);
                      
                      // ----------- Adjust the Gamma Curve ----------//
                      LCD_WriteCmdData(0x0050, 0x0000);
                      LCD_WriteCmdData(0x0051, 0x0704);
                      LCD_WriteCmdData(0x0052, 0x0C08);
                      LCD_WriteCmdData(0x0053, 0x0502);
                      LCD_WriteCmdData(0x0054, 0x080C);
                      LCD_WriteCmdData(0x0055, 0x0407);
                      LCD_WriteCmdData(0x0056, 0x0000);
                      LCD_WriteCmdData(0x0057, 0x0205);
                      LCD_WriteCmdData(0x0058, 0x0000);
                      LCD_WriteCmdData(0x0059, 0x0000);
                      
                      delay_ms(50); // Delay 50ms
                      LCD_WriteCmdData(0x0007, 0x1017);
              #endif
2006   1      
2007   1      #ifdef TFT20_R61503U
                      //R61503U
                      LCD_WriteCmd(0x0000);
                      LCD_WriteCmd(0x0000);
                      delay_ms(30);
                      LCD_WriteCmd(0x0000);
                      LCD_WriteCmd(0x0000);
                      LCD_WriteCmd(0x0000);
                      LCD_WriteCmd(0x0000);
                      delay_ms(10);
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x0100);
                      delay_ms(30);
                      LCD_WriteCmd(0x0000);LCD_WriteData(0x0001); 
                      delay_ms(30);
                       
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0001);
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x0000);
                      delay_ms(10);
                      LCD_WriteCmd(0x00A4);LCD_WriteData(0x0001);
                      delay_ms(60);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0001);
                      delay_ms(30);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 34  

                      LCD_WriteCmd(0x000C);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0018);LCD_WriteData(0x0001);
                       
                      LCD_WriteCmd(0x0010);LCD_WriteData(0x11B0);
                      LCD_WriteCmd(0x0011);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x0117);
                      LCD_WriteCmd(0x0013);LCD_WriteData(0x8E23);     //8E08
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x1117);  //0x1117 改为 0x1137
                      delay_ms(150);                                   //延时时间100ms 改为 150ms
                       
                      LCD_WriteCmd(0x0001);LCD_WriteData(0x0100);
                      LCD_WriteCmd(0x0002);LCD_WriteData(0x0700);
                      LCD_WriteCmd(0x0003);LCD_WriteData(0x1030);
                      LCD_WriteCmd(0x0004);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0008);LCD_WriteData(0x0504);
                      LCD_WriteCmd(0x0014);LCD_WriteData(0x8000);
                      LCD_WriteCmd(0x0020);LCD_WriteData(0x0000);
                      LCD_WriteCmd(0x0021);LCD_WriteData(0x0000); 
                      
                      LCD_WriteCmd(0x0030);LCD_WriteData(0x0601); 
                      LCD_WriteCmd(0x0031);LCD_WriteData(0x0507); 
                      LCD_WriteCmd(0x0032);LCD_WriteData(0x0000); 
                      LCD_WriteCmd(0x0033);LCD_WriteData(0x0007); 
                      LCD_WriteCmd(0x0034);LCD_WriteData(0x0505); 
                      LCD_WriteCmd(0x0035);LCD_WriteData(0x0004); 
                      LCD_WriteCmd(0x0036);LCD_WriteData(0x0605); 
                      LCD_WriteCmd(0x0037);LCD_WriteData(0x0702); 
                      LCD_WriteCmd(0x0038);LCD_WriteData(0x0207); 
                      LCD_WriteCmd(0x0039);LCD_WriteData(0x0602);  
                                                     
                      LCD_WriteCmd(0x0070);LCD_WriteData(0x1B00);
                      LCD_WriteCmd(0x0071);LCD_WriteData(0x0001);
                      LCD_WriteCmd(0x0090);LCD_WriteData(0x0001);//0008
                      LCD_WriteCmd(0x0091);LCD_WriteData(0x0100);
                      LCD_WriteCmd(0x0092);LCD_WriteData(0x0001);
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0021);
                      delay_ms(30);
                      LCD_WriteCmd(0x0012);LCD_WriteData(0x1137);
                      delay_ms(50);  //去掉这行代码
                      LCD_WriteCmd(0x0007);LCD_WriteData(0x0233);
                      delay_ms(30);
              
                      LCD_WriteCmd(0x0022);
              #endif
2073   1      
2074   1      #ifdef TFT20_HX8340B
                      //************* Start Initial Sequence **********//
                      LCD_WriteCmdData(0x17,0x05);      //COLMOD Control Register
                      //Gamma 2.0 Setting
                      LCD_WriteCmdData(0x60,0x00); //PTBA[15:8]
                      LCD_WriteCmdData(0x61,0x06); //PTBA[7:0]
                      LCD_WriteCmdData(0x62,0x00); //STBA[15:8]
                      LCD_WriteCmdData(0x63,0xd9); //STBA[7:0]
                      LCD_WriteCmdData(0x73,0x70); //OPON[7:0],SET OPON=70h, default 38h
                      
                      LCD_WriteCmdData(0x40,0x00);
                      LCD_WriteCmdData(0x41,0x40);
                      LCD_WriteCmdData(0x42,0x45);
                      LCD_WriteCmdData(0x43,0x01);
                      LCD_WriteCmdData(0x44,0x60);
                      LCD_WriteCmdData(0x45,0x05);
                      LCD_WriteCmdData(0x46,0x0C);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 35  

                      LCD_WriteCmdData(0x47,0xD1);
                      LCD_WriteCmdData(0x48,0x05);
                      
                      LCD_WriteCmdData(0x50,0x75);
                      LCD_WriteCmdData(0x51,0x01);
                      LCD_WriteCmdData(0x52,0x67);
                      LCD_WriteCmdData(0x53,0x14);
                      LCD_WriteCmdData(0x54,0xF2);
                      LCD_WriteCmdData(0x55,0x07);
                      LCD_WriteCmdData(0x56,0x03);
                      LCD_WriteCmdData(0x57,0x49);
                      
                      //For SRAM Improve
                      LCD_WriteCmdData(0x66,0x45); //SETVDC
                      LCD_WriteCmdData(0x80,0x0C); //SETIOOPT
                      //Power Voltage Setting
                      LCD_WriteCmdData(0x2F,0x11);
                      LCD_WriteCmdData(0x1F,0x03); //VReg1=4.65V
                      LCD_WriteCmdData(0x20,0x01); //BT (VGH~15V,VGL~-10V,DDVDH~5V)
                      LCD_WriteCmdData(0x24,0x1F); //VMH(VCOM High voltage3.2V)  0x22->3.35v
                      LCD_WriteCmdData(0x25,0x48); //VML(VCOM Low voltage -1.2V)  0x38->-1.1v
                      //(0x1c,0x4b)(0x1f,0x48)(0x22,0x46)(0x24,0x43)
                      LCD_WriteCmdData(0x23,0x2f); //reload from OTP// For Flicker adjust
                      
                      //Power on Setting
                      
                      LCD_WriteCmdData(0x1a,0x44);
                      LCD_WriteCmdData(0x1b,0x44);
                      
                      LCD_WriteCmdData(0x18,0x33); //I/P_RADJ,N/P_RADJ Noraml mode 60Hz \\0X44
                      LCD_WriteCmdData(0x21,0x01); //OSC_EN='1' start osc
                      LCD_WriteCmdData(0x01,0x00); //SLP='0' out sleep
                      LCD_WriteCmdData(0x1C,0x03); //AP=011
                      LCD_WriteCmdData(0x19,0x06); //VOMG=1,PON=1, DK=0,
                      delay_ms(1);
                      //Display ON Setting
                      LCD_WriteCmdData(0x26,0x84); //PT=10,GON=0, DTE=0, D=0100
                      delay_ms(4);
                      LCD_WriteCmdData(0x26,0xB8); //PT=10,GON=1, DTE=1, D=1000
                      delay_ms(4);
                      LCD_WriteCmdData(0x26,0xBC); //PT=10,GON=1, DTE=1, D=1100
                      //Set GRAM Area
                      LCD_WriteCmdData(0x02,0x00); //
                      LCD_WriteCmdData(0x03,0x00); //Column Start
                      LCD_WriteCmdData(0x04,0x00); //
                      LCD_WriteCmdData(0x05,0xAF); //Column End
                      LCD_WriteCmdData(0x06,0x00); //
                      LCD_WriteCmdData(0x07,0x00); //Row Start
                      LCD_WriteCmdData(0x08,0x00); //
                      LCD_WriteCmdData(0x09,0xDB); //Row End
                      delay_ms(500);
                      
                      LCD_WriteCmd(0x22); 
              
              #endif
2146   1      
2147   1      #ifdef TFT24_HX8357A
                      // SUB_SEL for HX8357-A in use MDDI I/F
                      //Add the two setting below while using MDDI I/F
                      LCD_WriteCmdData(0xFF,0x00); // Command page 0
                      LCD_WriteCmdData(0x72,0xF6); // SUB_SEL=0xF6
                      // Power saving for HX8357-A
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 36  

                      LCD_WriteCmdData(0xFF,0x00); // Command page 0
                      LCD_WriteCmdData(0xF2,0x00); // GENON=0x00
                      LCD_WriteCmdData(0xE4,0x00); // EQVCI_M1=0x00
                      LCD_WriteCmdData(0xE5,0x1C); // EQGND_M1=0x1C
                      LCD_WriteCmdData(0xE6,0x00); // EQVCI_M0=0x1C
                      LCD_WriteCmdData(0xE7,0x1C); // EQGND_M0=0x1C
                      LCD_WriteCmdData(0xEE,0x42); // For GRAM read/write speed
                      LCD_WriteCmdData(0xEF,0xDB); // For GRAM read/write speed
                      LCD_WriteCmdData(0x2E,0x98); //For Gate timing, prevent the display abnormal in RGB I/F
                      // Gamma
                      LCD_WriteCmdData(0x40,0x00);
                      LCD_WriteCmdData(0x41,0x2E);
                      LCD_WriteCmdData(0x42,0x2D);
                      LCD_WriteCmdData(0x43,0x3F);
                      LCD_WriteCmdData(0x44,0x3F);
                      LCD_WriteCmdData(0x45,0x3F);
                      LCD_WriteCmdData(0x46,0x2C);
                      LCD_WriteCmdData(0x47,0x7F);
                      LCD_WriteCmdData(0x48,0x07);
                      LCD_WriteCmdData(0x49,0x05);
                      LCD_WriteCmdData(0x4A,0x08);
                      LCD_WriteCmdData(0x4B,0x13);
                      LCD_WriteCmdData(0x4C,0x1E);
                      LCD_WriteCmdData(0x50,0x00);
                      LCD_WriteCmdData(0x51,0x00);
                      LCD_WriteCmdData(0x52,0x00);
                      LCD_WriteCmdData(0x24,0x22); // Set VCOMH voltage, VHH=0x64
                      LCD_WriteCmdData(0x25,0x64); // Set VCOML voltage, VML=0x71
                      LCD_WriteCmdData(0x23,0x90); // Set VCOM offset, VMF=0x52
                      LCD_WriteCmdData(0x1B,0x0E); // Set VERG1 voltage, VRH[5:0]=0x1E
                      LCD_WriteCmdData(0x1D,0x11); // FS0[1:0]=01, Set the operating frequency of the step-up circuit 1
                      // Power on Setting
                      LCD_WriteCmdData(0x19,0x01); // OSC_EN=1, Start to Oscillate
                      LCD_WriteCmdData(0x1C,0x03); // AP=011
                      LCD_WriteCmdData(0x01,0x00); // Normal display(Exit Deep standby mode)
                      LCD_WriteCmdData(0x1F,0x80); // Exit standby mode and Step-up circuit 1 enable
                      // GAS_EN=1, VCOMG=0, PON=0, DK=0, XDK=0, DDVDH_TRI=0, STB=0
                      delay_ms(5);
                      LCD_WriteCmdData(0x1F,0x90); // Step-up circuit 2 enable
                      // GAS_EN=1, VCOMG=0, PON=1, DK=0, XDK=0, DDVDH_TRI=0, STB=0
                      delay_ms(5);
                      LCD_WriteCmdData(0x1F,0xD4);
                      // GAS_EN=1, VCOMG=1, PON=1, DK=0, XDK=1, DDVDH_TRI=0, STB=0
                      delay_ms(5);
                      // Display ON Setting
                      LCD_WriteCmdData(0x28,0x08); // GON=0, DTE=0, D[1:0]=01
                      delay_ms(40);
                      LCD_WriteCmdData(0x28,0x38); // GON=1, DTE=1, D[1:0]=10
                      delay_ms(40);
                      LCD_WriteCmdData(0x28,0x3C); // GON=1, DTE=1, D[1:0]=11
                      LCD_WriteCmdData(0x17,0x05); // 16-bit/pixel
              
                      LCD_WriteCmdData(0xFF,0x00); //Select Command Page 0 
                      // If command page not change, the RFFh can remove 
                      LCD_WriteCmdData(0x80,0x00); // Set CAC=0x0000 
                      LCD_WriteCmdData(0x81,0x00); 
                      LCD_WriteCmdData(0x82,0x00); // Set RAC=0x0000 
                      LCD_WriteCmdData(0x83,0x00); 
              
                      LCD_WriteCmdData(0x6B,0x20);
                      LCD_WriteCmdData(0x16,0x08);
              
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 37  

                      LCD_WriteCmdData(0x53,0x12);
                      LCD_WriteCmdData(0x54,0x11);
                      LCD_WriteCmdData(0x55,0x3F);
                      LCD_WriteCmdData(0x56,0x00);
                      LCD_WriteCmdData(0x57,0x53);
                      LCD_WriteCmdData(0x58,0x01);
                      LCD_WriteCmdData(0x59,0x0C);
                      LCD_WriteCmdData(0x5A,0x17);
                      LCD_WriteCmdData(0x5B,0x1A);
                      LCD_WriteCmdData(0x5C,0x18);
                      LCD_WriteCmdData(0x5D,0xC3);
                      // Set GRAM area 320x240
                      LCD_WriteCmdData(0x02,0x00);
                      LCD_WriteCmdData(0x03,0x00);
                      LCD_WriteCmdData(0x04,0x01);
                      LCD_WriteCmdData(0x05,0x3F);
                      LCD_WriteCmdData(0x06,0x00);
                      LCD_WriteCmdData(0x07,0x00);
                      LCD_WriteCmdData(0x08,0x00);
                      LCD_WriteCmdData(0x09,0xEF);
                      LCD_WriteCmd(0x22);
              #endif
2237   1      
2238   1              LCD_Display_Dir(TFTLCD_DIR);            //0：竖屏  1：横屏  默认竖屏
2239   1              LCD_Clear(BACK_COLOR);
2240   1      }
2241          
2242          //设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
2243          //sx,sy:窗口起始坐标(左上角)
2244          //width,height:窗口宽度和高度,必须大于0!!
2245          //窗体大小:width*height. 
2246          void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height)
2247          {
2248   1      #ifdef TFT20_HX8309
                      u16 x,y,xy;
                      x=(width<<8)|sx;
                      y=(height<<8)|sy;
                      xy = (sy<<8)|sx;
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmd(0x44);LCD_WriteData(x);
                              LCD_WriteCmd(0x45);LCD_WriteData(y);
                              LCD_WriteCmd(0x21);LCD_WriteData(xy);   
                      }
                      else
                      {
                              xy = (sx<<8)|sy;
                              LCD_WriteCmd(0x45);LCD_WriteData(x);
                              LCD_WriteCmd(0x44);LCD_WriteData(y);
                              LCD_WriteCmd(0x21);LCD_WriteData(xy);
                      }
                      LCD_WriteCmd(0x22);
              #endif
2268   1      
2269   1      #ifdef TFT22_R61503B
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmd(0x0050);
                              LCD_WriteData(sx);       
                              LCD_WriteCmd(0x0051);
                              LCD_WriteData(width);  
                              LCD_WriteCmd(0x0052);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 38  

                              LCD_WriteData(sy);
                              LCD_WriteCmd(0x0053);
                              LCD_WriteData(height);
              
                              LCD_WriteCmd(0x0020);
                              LCD_WriteData(sx);
                              LCD_WriteCmd(0x0021);
                              LCD_WriteData(sy);
              
                              LCD_WriteCmd(0x0022);
                      
                      }
                      else
                      {
                              LCD_WriteCmd(0x0052);
                              LCD_WriteData(sx);       
                              LCD_WriteCmd(0x0053);
                              LCD_WriteData(width);  
                              LCD_WriteCmd(0x0050);
                              LCD_WriteData(sy);
                              LCD_WriteCmd(0x0051);
                              LCD_WriteData(height);
              
                              LCD_WriteCmd(0x0021);
                              LCD_WriteData(sx);
                              LCD_WriteCmd(0x0020);
                              LCD_WriteData(sy);
              
                              LCD_WriteCmd(0x0022);
                      }
              #endif
2308   1              
2309   1      #ifdef TFT22_ILI9225B
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmdData(0x0037, sx);
                              LCD_WriteCmdData(0x0036, width); 
                              LCD_WriteCmdData(0x0039, sy);
                              LCD_WriteCmdData(0x0038, height);
                      
                              LCD_WriteCmdData(0x0020, sx);
                              LCD_WriteCmdData(0x0021, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
                      else
                      {
                              LCD_WriteCmdData(0x0039, sx);
                              LCD_WriteCmdData(0x0038, width); 
                              LCD_WriteCmdData(0x0037, sy);
                              LCD_WriteCmdData(0x0036, height);
                      
                              LCD_WriteCmdData(0x0021, sx);
                              LCD_WriteCmdData(0x0020, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
              #endif
2335   1      
2336   1      #ifdef TFT24_ST7781R
                      if(tftlcd_data.dir==0)  
                      {
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 39  

                              LCD_WriteCmdData(0x0050, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0051, width); // Horizontal Address End Position
                              LCD_WriteCmdData(0x0052, sy); // Vertical Address Start Position
                              LCD_WriteCmdData(0x0053, height); // Vertical Address End Position
                      
                              LCD_WriteCmdData(0x0020, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0021, sy); // Vertical Address Start Position
                              LCD_WriteCmd(0x0022);   
                      }
                      else
                      {
                              LCD_WriteCmdData(0x0052, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0053, width); // Horizontal Address End Position
                              LCD_WriteCmdData(0x0050, sy); // Vertical Address Start Position
                              LCD_WriteCmdData(0x0051, height); // Vertical Address End Position
                      
                              LCD_WriteCmdData(0x0021, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0020, sy); // Vertical Address Start Position
                              LCD_WriteCmd(0x0022);   
                      }       
              #endif
2360   1      
2361   1      #ifdef TFT26_R61509V
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmd(0x0210);   LCD_WriteData(sx);
                              LCD_WriteCmd(0x0211);   LCD_WriteData(width);
                              LCD_WriteCmd(0x0212);   LCD_WriteData(sy);
                              LCD_WriteCmd(0x0213);   LCD_WriteData(height);
                      
                              LCD_WriteCmd(0x0200);   LCD_WriteData(sx);
                              LCD_WriteCmd(0x0201);   LCD_WriteData(sy);
                      
                              LCD_WriteCmd(0x0202);
                      }
                      else
                      {
                              LCD_WriteCmd(0x0212);   LCD_WriteData(sx);
                              LCD_WriteCmd(0x0213);   LCD_WriteData(width);
                              LCD_WriteCmd(0x0210);   LCD_WriteData(sy);
                              LCD_WriteCmd(0x0211);   LCD_WriteData(height);
                      
                              LCD_WriteCmd(0x0201);   LCD_WriteData(sx);
                              LCD_WriteCmd(0x0200);   LCD_WriteData(sy);
                      
                              LCD_WriteCmd(0x0202);
                      }
              #endif
2387   1      
2388   1      #ifdef TFT26_ILI9325D
2389   1              if(tftlcd_data.dir==0)  
2390   1              {
2391   2                      LCD_WriteCmdData(0x0050, sx); // Horizontal GRAM Start Address 
2392   2                      LCD_WriteCmdData(0x0051, width); // Horizontal GRAM End Address 
2393   2                      LCD_WriteCmdData(0x0052, sy); // Vertical GRAM Start Address 
2394   2                      LCD_WriteCmdData(0x0053, height); // Vertical GRAM Start Address 
2395   2              
2396   2                      LCD_WriteCmdData(0x0020, sx); // GRAM horizontal Address 
2397   2                      LCD_WriteCmdData(0x0021, sy); // GRAM Vertical Address
2398   2                      LCD_WriteCmd(0x0022);
2399   2              }
2400   1              else
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 40  

2401   1              {
2402   2                      LCD_WriteCmdData(0x0052, sx); // Horizontal GRAM Start Address 
2403   2                      LCD_WriteCmdData(0x0053, width); // Horizontal GRAM End Address 
2404   2                      LCD_WriteCmdData(0x0050, sy); // Vertical GRAM Start Address 
2405   2                      LCD_WriteCmdData(0x0051, height); // Vertical GRAM Start Address 
2406   2              
2407   2                      LCD_WriteCmdData(0x0021, sx); // GRAM horizontal Address 
2408   2                      LCD_WriteCmdData(0x0020, sy); // GRAM Vertical Address
2409   2                      LCD_WriteCmd(0x0022);
2410   2              }
2411   1      #endif
2412   1      
2413   1      #ifdef TFT24_ST7789S
                              LCD_WriteCmd(0x2a);   
                              LCD_WriteData(sx>>8);
                              LCD_WriteData(sx&0xff);
                              LCD_WriteData(width>>8);
                              LCD_WriteData(width&0xff);
                      
                              LCD_WriteCmd(0x2b);   
                              LCD_WriteData(sy>>8);
                              LCD_WriteData(sy&0xff);
                              LCD_WriteData(height>>8);
                              LCD_WriteData(height&0xff);
              
                              LCD_WriteCmd(0x2c);
              #endif
2428   1      
2429   1      #ifdef TFT24_SSD1297
                              if(tftlcd_data.dir==0)
                              {
                                      LCD_WriteCmd(0x0044);LCD_WriteData(width<<8|sx);        
                                      LCD_WriteCmd(0x0045);LCD_WriteData(sy);           
                                      LCD_WriteCmd(0x0046);LCD_WriteData(height);             
                                      LCD_WriteCmd(0x004e);LCD_WriteData(sx);         
                                      LCD_WriteCmd(0x004f);LCD_WriteData(sy);         
                                      LCD_WriteCmd(0x0022);  
                              }
                              else
                              {
                                      LCD_WriteCmd(0x0044);LCD_WriteData(height<<8|sy);       
                                      LCD_WriteCmd(0x0045);LCD_WriteData(sx);           
                                      LCD_WriteCmd(0x0046);LCD_WriteData(width);              
                                      LCD_WriteCmd(0x004e);LCD_WriteData(sy);         
                                      LCD_WriteCmd(0x004f);LCD_WriteData(sx);         
                                      LCD_WriteCmd(0x0022);   
                              } 
              #endif
2449   1      
2450   1      #ifdef TFT20_ILI9225
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmdData(0x0037, sx);
                              LCD_WriteCmdData(0x0036, width); 
                              LCD_WriteCmdData(0x0039, sy);
                              LCD_WriteCmdData(0x0038, height);
                      
                              LCD_WriteCmdData(0x0020, sx);
                              LCD_WriteCmdData(0x0021, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 41  

                      else
                      {
                              LCD_WriteCmdData(0x0039, sx);
                              LCD_WriteCmdData(0x0038, width); 
                              LCD_WriteCmdData(0x0037, sy);
                              LCD_WriteCmdData(0x0036, height);
                      
                              LCD_WriteCmdData(0x0021, sx);
                              LCD_WriteCmdData(0x0020, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
              #endif
2476   1      
2477   1      #ifdef TFT20_ILI9341
                              LCD_WriteCmd(0x2a);   
                              LCD_WriteData_Color(sx);
                              LCD_WriteData_Color(width);
                      
                              LCD_WriteCmd(0x2b);   
                              LCD_WriteData_Color(sy);
                              LCD_WriteData_Color(height);
              
                              LCD_WriteCmd(0x2c);
              #endif
2488   1      
2489   1      #ifdef TFT20_ST7775R
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmd(0x36);LCD_WriteData(width); 
                              LCD_WriteCmd(0x37);LCD_WriteData(sx); 
                              LCD_WriteCmd(0x38);LCD_WriteData(height); 
                              LCD_WriteCmd(0x39);LCD_WriteData(sy); 
                      
                              LCD_WriteCmd(0x20);LCD_WriteData(sx);
                              LCD_WriteCmd(0x21);LCD_WriteData(sy);
                      
                              LCD_WriteCmd(0x22);
                      }
                      else
                      {
                              LCD_WriteCmd(0x36);LCD_WriteData(height); 
                              LCD_WriteCmd(0x37);LCD_WriteData(sy); 
                              LCD_WriteCmd(0x38);LCD_WriteData(width); 
                              LCD_WriteCmd(0x39);LCD_WriteData(sx); 
                      
                              LCD_WriteCmd(0x20);LCD_WriteData(sy);
                              LCD_WriteCmd(0x21);LCD_WriteData(sx);
                      
                              LCD_WriteCmd(0x22);
                      }
              #endif
2515   1      
2516   1      #ifdef TFT20_ST7775RV
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmd(0x36);LCD_WriteData(width); 
                              LCD_WriteCmd(0x37);LCD_WriteData(sx); 
                              LCD_WriteCmd(0x38);LCD_WriteData(height); 
                              LCD_WriteCmd(0x39);LCD_WriteData(sy); 
                      
                              LCD_WriteCmd(0x20);LCD_WriteData(sx);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 42  

                              LCD_WriteCmd(0x21);LCD_WriteData(sy);
                      
                              LCD_WriteCmd(0x22);
                      }
                      else
                      {
                              LCD_WriteCmd(0x36);LCD_WriteData(height); 
                              LCD_WriteCmd(0x37);LCD_WriteData(sy); 
                              LCD_WriteCmd(0x38);LCD_WriteData(width); 
                              LCD_WriteCmd(0x39);LCD_WriteData(sx); 
                      
                              LCD_WriteCmd(0x20);LCD_WriteData(sy);
                              LCD_WriteCmd(0x21);LCD_WriteData(sx);
                      
                              LCD_WriteCmd(0x22);
                      }
              #endif
2542   1      
2543   1      #ifdef TFT20_ILI9225C
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmdData(0x0037, sx);
                              LCD_WriteCmdData(0x0036, width); 
                              LCD_WriteCmdData(0x0039, sy);
                              LCD_WriteCmdData(0x0038, height);
                      
                              LCD_WriteCmdData(0x0020, sx);
                              LCD_WriteCmdData(0x0021, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
                      else
                      {
                              LCD_WriteCmdData(0x0039, sx);
                              LCD_WriteCmdData(0x0038, width); 
                              LCD_WriteCmdData(0x0037, sy);
                              LCD_WriteCmdData(0x0036, height);
                      
                              LCD_WriteCmdData(0x0021, sx);
                              LCD_WriteCmdData(0x0020, sy);
                      
                              LCD_WriteCmd(0x0022);
                      }
              #endif
2569   1      
2570   1      #ifdef TFT20_R61503U
                      if(tftlcd_data.dir==0)  
                      {
                              LCD_WriteCmdData(0x0050, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0051, width); // Horizontal Address End Position
                              LCD_WriteCmdData(0x0052, sy); // Vertical Address Start Position
                              LCD_WriteCmdData(0x0053, height); // Vertical Address End Position
                      
                              LCD_WriteCmdData(0x0020, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0021, sy); // Vertical Address Start Position
                              LCD_WriteCmd(0x0022);   
                      }
                      else
                      {
                              LCD_WriteCmdData(0x0052, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0053, width); // Horizontal Address End Position
                              LCD_WriteCmdData(0x0050, sy); // Vertical Address Start Position
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 43  

                              LCD_WriteCmdData(0x0051, height); // Vertical Address End Position
                      
                              LCD_WriteCmdData(0x0021, sx); // Horizontal Address Start Position
                              LCD_WriteCmdData(0x0020, sy); // Vertical Address Start Position
                              LCD_WriteCmd(0x0022);   
                      }       
              #endif
2594   1      
2595   1      #ifdef TFT20_HX8340B
                      if(tftlcd_data.dir==0)
                      {
                              LCD_WriteCmd(0x02);LCD_WriteData(sx>>8);     
                              LCD_WriteCmd(0x03);LCD_WriteData(sx&0xff);       
                              LCD_WriteCmd(0x04);LCD_WriteData(width>>8); 
                              LCD_WriteCmd(0x05);LCD_WriteData(width&0xff); 
                              
                              LCD_WriteCmd(0x06);LCD_WriteData(sy>>8); 
                              LCD_WriteCmd(0x07);LCD_WriteData(sy&0xff);
                              LCD_WriteCmd(0x08);LCD_WriteData(height>>8); 
                              LCD_WriteCmd(0x09);LCD_WriteData(height&0xff);
                      }
                      else
                      {
                              LCD_WriteCmd(0x02);LCD_WriteData(sx>>8);     
                              LCD_WriteCmd(0x03);LCD_WriteData(sx&0xff);       
                              LCD_WriteCmd(0x04);LCD_WriteData(width>>8); 
                              LCD_WriteCmd(0x05);LCD_WriteData(width&0xff); 
                              
                              LCD_WriteCmd(0x06);LCD_WriteData(sy>>8); 
                              LCD_WriteCmd(0x07);LCD_WriteData(sy&0xff);
                              LCD_WriteCmd(0x08);LCD_WriteData(height>>8); 
                              LCD_WriteCmd(0x09);LCD_WriteData(height&0xff);
                      }       
                      LCD_WriteCmd(0x22);
              #endif
2622   1      
2623   1      #ifdef TFT24_HX8357A
                      if(tftlcd_data.dir==0)
                      {
                              LCD_WriteCmd(0x02);LCD_WriteData(sx>>8);     
                              LCD_WriteCmd(0x03);LCD_WriteData(sx&0xff);       
                              LCD_WriteCmd(0x04);LCD_WriteData(width>>8); 
                              LCD_WriteCmd(0x05);LCD_WriteData(width&0xff); 
                              
                              LCD_WriteCmd(0x06);LCD_WriteData(sy>>8); 
                              LCD_WriteCmd(0x07);LCD_WriteData(sy&0xff);
                              LCD_WriteCmd(0x08);LCD_WriteData(height>>8); 
                              LCD_WriteCmd(0x09);LCD_WriteData(height&0xff);
                      
                              LCD_WriteCmdData(0x80,sx>>8); // Set CAC=0x0000 
                              LCD_WriteCmdData(0x81,sx&0xff); 
                              LCD_WriteCmdData(0x82,sy>>8); // Set RAC=0x0000 
                              LCD_WriteCmdData(0x83,sy&0xff); 
                      }
                      else
                      {
                              LCD_WriteCmd(0x06);LCD_WriteData(sx>>8);     
                              LCD_WriteCmd(0x07);LCD_WriteData(sx&0xff);       
                              LCD_WriteCmd(0x08);LCD_WriteData(width>>8); 
                              LCD_WriteCmd(0x09);LCD_WriteData(width&0xff); 
                              
                              LCD_WriteCmd(0x02);LCD_WriteData(sy>>8); 
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 44  

                              LCD_WriteCmd(0x03);LCD_WriteData(sy&0xff);
                              LCD_WriteCmd(0x04);LCD_WriteData(height>>8); 
                              LCD_WriteCmd(0x05);LCD_WriteData(height&0xff);
                      
                              LCD_WriteCmdData(0x82,sx>>8); // Set CAC=0x0000 
                              LCD_WriteCmdData(0x83,sx&0xff); 
                              LCD_WriteCmdData(0x80,sy>>8); // Set RAC=0x0000 
                              LCD_WriteCmdData(0x81,sy&0xff); 
                      }
                      LCD_WriteCmd(0x22);
              #endif
2660   1      }
2661          
2662          //读取个某点的颜色值     
2663          //x,y:坐标
2664          //返回值:此点的颜色
2665          u16 LCD_ReadPoint(u16 x,u16 y)
2666          {
2667   1              u16 r=0,g=0x0001,b=0x0001,dat;
2668   1              if(x>=tftlcd_data.width||y>=tftlcd_data.height)return 0;        //超过了范围,直接返回                
2669   1              LCD_Set_Window(x, y, x, y);
2670   1              
2671   1      #ifdef TFT22_R61503B
                      
              
                      //LCD_Set_Window(x, y, x, y);
                      dat=LCD_ReadData();             //dummy Read
                      dat=LCD_ReadData();
              
                        
                      b=dat>>11;                               
                      g=(dat>>5)&0x003f;
                      r=dat&0x001f;
                      dat=(r<<11)|(g<<5)|(b); 
                                                                 
                      r=dat;
                                                         
                      
              #endif
2688   1      
2689   1      #ifdef TFT22_ILI9225B   
                      LCD_WriteCmd(0X0022);                                                      
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2695   1      
2696   1      #ifdef TFT24_ST7781R    
                      LCD_WriteCmd(0X0022);
                      r=LCD_ReadData();               //dummy Read                                                               
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2701   1      
2702   1      #ifdef TFT26_R61509V    
                      LCD_WriteCmd(0X0202);                                                      
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2708   1              
2709   1      #ifdef TFT26_ILI9325D   
2710   1              LCD_WriteCmd(0X0022);
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 45  

2711   1              r=LCD_ReadData();               //dummy Read                                                               
2712   1              r=LCD_ReadData();               //实际坐标颜色
2713   1      #endif
2714   1      
2715   1      #ifdef TFT24_ST7789S
                      dat=LCD_ReadData();             //dummy Read
                      dat=LCD_ReadData();
                      dat=dat<<8;
                      dat|=LCD_ReadData();
                                                 
                      r=dat;  
              #endif
2723   1      
2724   1      #ifdef TFT20_ILI9225    
                      LCD_WriteCmd(0X0022);                                                      
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2730   1      
2731   1      #ifdef TFT20_ILI9341    
                      LCD_WriteCmd(0X2e);                                                        
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
                      g=LCD_ReadData();
                      b=LCD_ReadData();
                      return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));            
              #endif
2739   1      
2740   1      #ifdef TFT20_ST7775R    
                      LCD_WriteCmd(0X22);                                                        
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif  
2746   1      
2747   1      #ifdef TFT20_ST7775RV   
                      LCD_WriteCmd(0X22);                                                        
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2753   1      
2754   1      #ifdef TFT20_ILI9225C   
                      LCD_WriteCmd(0X0022);                                                      
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2760   1      
2761   1      #ifdef TFT20_R61503U    
                      LCD_WriteCmd(0X0022);                                                      
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
              #endif
2767   1      
2768   1      #ifdef TFT20_HX8340B    
                      LCD_WriteCmd(0X22);                                                        
                      r=LCD_ReadData();               //dummy Read
                      r=LCD_ReadData();               //实际坐标颜色
                      g=LCD_ReadData();
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 46  

                      b=LCD_ReadData();
                      return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));            
              #endif
2776   1      
2777   1              return r;
2778   1      }
*** WARNING C280 IN LINE 2667 OF APP\TFTLCD\TFTLCD.C: 'dat': unreferenced local variable
2779          
2780          //清屏函数
2781          //color:要清屏的填充色
2782          void LCD_Clear(u16 color)
2783          {
2784   1              u16 i=0, j=0 ;
2785   1      
2786   1              LCD_Set_Window(0, 0, tftlcd_data.width-1, tftlcd_data.height-1);         //作用区域
2787   1              for(i=0; i<tftlcd_data.width; i++)
2788   1              {
2789   2                      for (j=0; j<tftlcd_data.height; j++)
2790   2                      {
2791   3                              LCD_WriteData_Color(color);
2792   3                      }
2793   2              } 
2794   1      }
2795          
2796          //在指定区域内填充单个颜色
2797          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
2798          //color:要填充的颜色
2799          void LCD_Fill(u16 xState,u16 yState,u16 xEnd,u16 yEnd,u16 color)
2800          {          
2801   1              u16 temp=0;
2802   1      
2803   1          if((xState > xEnd) || (yState > yEnd))
2804   1          {
2805   2              return;
2806   2          }   
2807   1              LCD_Set_Window(xState, yState, xEnd, yEnd); 
2808   1          xState = xEnd - xState + 1;
2809   1              yState = yEnd - yState + 1;
2810   1      
2811   1              while(xState--)
2812   1              {
2813   2                      temp = yState;
2814   2                      while (temp--)
2815   2                      {                       
2816   3                              LCD_WriteData_Color(color);     
2817   3                      }
2818   2              }       
2819   1      } 
2820          
2821          //在指定区域内填充指定颜色块                     
2822          //(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)   
2823          //color:要填充的颜色
2824          void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color)
2825          {  
2826   1              u16 height,width;
2827   1              u16 i,j;
2828   1              width=ex-sx+1;                  //得到填充的宽度
2829   1              height=ey-sy+1;                 //高度
2830   1              LCD_Set_Window(sx, sy,ex, ey);
2831   1              for(i=0;i<height;i++)
2832   1              {
2833   2                      for(j=0;j<width;j++)
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 47  

2834   2                      {
2835   3                              LCD_WriteData_Color(color[i*width+j]);
2836   3                      }
2837   2              }                   
2838   1      }
2839          
2840          //画点
2841          //x,y:坐标
2842          //FRONT_COLOR:此点的颜色
2843          void LCD_DrawPoint(u16 x,u16 y)
2844          {
2845   1              LCD_Set_Window(x, y, x, y);  //设置点的位置
2846   1              LCD_WriteData_Color(FRONT_COLOR);       
2847   1      }
2848          
2849          //快速画点
2850          //x,y:坐标
2851          //color:颜色
2852          void LCD_DrawFRONT_COLOR(u16 x,u16 y,u16 color)
2853          {          
2854   1              LCD_Set_Window(x, y, x, y);
2855   1              LCD_WriteData_Color(color);     
2856   1      } 
2857          
2858          //画一个大点
2859          //2*2的点                          
2860          void LCD_DrawBigPoint(u16 x,u16 y,u16 color)
2861          {           
2862   1              LCD_DrawFRONT_COLOR(x,y,color);//中心点 
2863   1              LCD_DrawFRONT_COLOR(x+1,y,color);
2864   1              LCD_DrawFRONT_COLOR(x,y+1,color);
2865   1              LCD_DrawFRONT_COLOR(x+1,y+1,color);                     
2866   1      }
2867          
2868          //画线
2869          //x1,y1:起点坐标
2870          //x2,y2:终点坐标  
2871          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
2872          {
2873   1              u16 t=0; 
2874   1              int xerr=0,yerr=0,delta_x,delta_y,distance; 
2875   1              int incx,incy,uRow,uCol; 
2876   1              delta_x=x2-x1; //计算坐标增量 
2877   1              delta_y=y2-y1; 
2878   1              uRow=x1; 
2879   1              uCol=y1; 
2880   1              if(delta_x>0)incx=1; //设置单步方向 
2881   1              else if(delta_x==0)incx=0;//垂直线 
2882   1              else {incx=-1;delta_x=-delta_x;} 
2883   1              if(delta_y>0)incy=1; 
2884   1              else if(delta_y==0)incy=0;//水平线 
2885   1              else{incy=-1;delta_y=-delta_y;} 
2886   1              if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
2887   1              else distance=delta_y; 
2888   1              for(t=0;t<=distance+1;t++ )//画线输出 
2889   1              {  
2890   2                      LCD_DrawPoint(uRow,uCol);//画点 
2891   2                      xerr+=delta_x ; 
2892   2                      yerr+=delta_y ; 
2893   2                      if(xerr>distance) 
2894   2                      { 
2895   3                              xerr-=distance; 
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 48  

2896   3                              uRow+=incx; 
2897   3                      } 
2898   2                      if(yerr>distance) 
2899   2                      { 
2900   3                              yerr-=distance; 
2901   3                              uCol+=incy; 
2902   3                      } 
2903   2              }  
2904   1      } 
2905          
2906          void LCD_DrawLine_Color(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
2907          {
2908   1              u16 t; 
2909   1              int xerr=0,yerr=0,delta_x,delta_y,distance; 
2910   1              int incx,incy,uRow,uCol; 
2911   1              delta_x=x2-x1; //计算坐标增量 
2912   1              delta_y=y2-y1; 
2913   1              uRow=x1; 
2914   1              uCol=y1; 
2915   1              if(delta_x>0)incx=1; //设置单步方向 
2916   1              else if(delta_x==0)incx=0;//垂直线 
2917   1              else {incx=-1;delta_x=-delta_x;} 
2918   1              if(delta_y>0)incy=1; 
2919   1              else if(delta_y==0)incy=0;//水平线 
2920   1              else{incy=-1;delta_y=-delta_y;} 
2921   1              if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
2922   1              else distance=delta_y; 
2923   1              for(t=0;t<=distance+1;t++ )//画线输出 
2924   1              {  
2925   2                      LCD_DrawFRONT_COLOR(uRow,uCol,color);//画点 
2926   2                      xerr+=delta_x ; 
2927   2                      yerr+=delta_y ; 
2928   2                      if(xerr>distance) 
2929   2                      { 
2930   3                              xerr-=distance; 
2931   3                              uRow+=incx; 
2932   3                      } 
2933   2                      if(yerr>distance) 
2934   2                      { 
2935   3                              yerr-=distance; 
2936   3                              uCol+=incy; 
2937   3                      } 
2938   2              }  
2939   1      } 
2940          
2941          
2942          // 画一个十字的标记
2943          // x：标记的X坐标
2944          // y：标记的Y坐标
2945          // color：标记的颜色
2946          void LCD_DrowSign(u16 x, u16 y, u16 color)
2947          {
2948   1          u8 i;
2949   1      
2950   1          /* 画点 */
2951   1          LCD_Set_Window(x-1, y-1, x+1, y+1);
2952   1          for(i=0; i<9; i++)
2953   1          {
2954   2                      LCD_WriteData_Color(color);   
2955   2          }
2956   1      
2957   1          /* 画竖 */
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 49  

2958   1          LCD_Set_Window(x-4, y, x+4, y);
2959   1          for(i=0; i<9; i++)
2960   1          {
2961   2                      LCD_WriteData_Color(color); 
2962   2          }
2963   1      
2964   1          /* 画横 */
2965   1          LCD_Set_Window(x, y-4, x, y+4);
2966   1          for(i=0; i<9; i++)
2967   1          {
2968   2                      LCD_WriteData_Color(color); 
2969   2          }
2970   1      }
2971          
2972          //画矩形          
2973          //(x1,y1),(x2,y2):矩形的对角坐标
2974          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
2975          {
2976   1              LCD_DrawLine(x1,y1,x2,y1);
2977   1              LCD_DrawLine(x1,y1,x1,y2);
2978   1              LCD_DrawLine(x1,y2,x2,y2);
2979   1              LCD_DrawLine(x2,y1,x2,y2);
2980   1      }
2981          //在指定位置画一个指定大小的圆
2982          //(x,y):中心点
2983          //r    :半径
2984          void LCD_Draw_Circle(u16 x0,u16 y0,u8 r)
2985          {
2986   1              int a,b;
2987   1              int di;
2988   1              a=0;b=r;          
2989   1              di=3-(r<<1);             //判断下个点位置的标志
2990   1              while(a<=b)
2991   1              {
2992   2                      LCD_DrawPoint(x0+a,y0-b);             //5
2993   2                      LCD_DrawPoint(x0+b,y0-a);             //0           
2994   2                      LCD_DrawPoint(x0+b,y0+a);             //4               
2995   2                      LCD_DrawPoint(x0+a,y0+b);             //6 
2996   2                      LCD_DrawPoint(x0-a,y0+b);             //1       
2997   2                      LCD_DrawPoint(x0-b,y0+a);             
2998   2                      LCD_DrawPoint(x0-a,y0-b);             //2             
2999   2                      LCD_DrawPoint(x0-b,y0-a);             //7                
3000   2                      a++;
3001   2                      //使用Bresenham算法画圆     
3002   2                      if(di<0)di +=4*a+6;       
3003   2                      else
3004   2                      {
3005   3                              di+=10+4*(a-b);   
3006   3                              b--;
3007   3                      }                                                   
3008   2              }
3009   1      } 
3010          
3011          
3012          //在指定位置显示一个字符
3013          //x,y:起始坐标
3014          //num:要显示的字符:" "--->"~"
3015          //size:字体大小 12/16/24
3016          //mode:叠加方式(1)还是非叠加方式(0)
3017          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
3018          {                                                         
3019   1          u8 temp,t1,t;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 50  

3020   1              u16 y0=y;
3021   1              u8 csize=(size/8+((size%8)?1:0))*(size/2);              //得到字体一个字符对应点阵集所占的字节数        
3022   1              num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
3023   1              for(t=0;t<csize;t++)
3024   1              {   
3025   2                      if(size==12)temp=ascii_1206[num][t];            //调用1206字体
3026   2                      else if(size==16)temp=ascii_1608[num][t];       //调用1608字体
3027   2                      else if(size==24)temp=ascii_2412[num][t];       //调用2412字体
3028   2                      else return;                                                            //没有的字库
3029   2                      for(t1=0;t1<8;t1++)
3030   2                      {                           
3031   3                              if(temp&0x80)LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
3032   3                              else if(mode==0)LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
3033   3                              temp<<=1;
3034   3                              y++;
3035   3                              if(y>=tftlcd_data.height)return;                //超区域了
3036   3                              if((y-y0)==size)
3037   3                              {
3038   4                                      y=y0;
3039   4                                      x++;
3040   4                                      if(x>=tftlcd_data.width)return; //超区域了
3041   4                                      break;
3042   4                              }
3043   3                      }        
3044   2              }                                 
3045   1      }   
3046          //m^n函数
3047          //返回值:m^n次方.
3048          u32 LCD_Pow(u8 m,u8 n)
3049          {
3050   1              u32 result=1;    
3051   1              while(n--)result*=m;    
3052   1              return result;
3053   1      }                        
3054          //显示数字,高位为0,则不显示
3055          //x,y :起点坐标  
3056          //len :数字的位数
3057          //size:字体大小
3058          //color:颜色 
3059          //num:数值(0~4294967295);        
3060          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size)
3061          {               
3062   1              u8 t,temp;
3063   1              u8 enshow=0;                                               
3064   1              for(t=0;t<len;t++)
3065   1              {
3066   2                      temp=(num/LCD_Pow(10,len-t-1))%10;
3067   2                      if(enshow==0&&t<(len-1))
3068   2                      {
3069   3                              if(temp==0)
3070   3                              {
3071   4                                      LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
3072   4                                      continue;
3073   4                              }else enshow=1; 
3074   3                               
3075   3                      }
3076   2                      LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0); 
3077   2              }
3078   1      } 
3079          
3080          //显示数字,高位为0,还是显示
3081          //x,y:起点坐标
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 51  

3082          //num:数值(0~999999999);         
3083          //len:长度(即要显示的位数)
3084          //size:字体大小
3085          //mode:
3086          //[7]:0,不填充;1,填充0.
3087          //[6:1]:保留
3088          //[0]:0,非叠加显示;1,叠加显示.
3089          void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
3090          {  
3091   1              u8 t,temp;
3092   1              u8 enshow=0;                                               
3093   1              for(t=0;t<len;t++)
3094   1              {
3095   2                      temp=(num/LCD_Pow(10,len-t-1))%10;
3096   2                      if(enshow==0&&t<(len-1))
3097   2                      {
3098   3                              if(temp==0)
3099   3                              {
3100   4                                      if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);  
3101   4                                      else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);  
3102   4                                      continue;
3103   4                              }else enshow=1; 
3104   3                               
3105   3                      }
3106   2                      LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01); 
3107   2              }
3108   1      } 
3109          //显示字符串
3110          //x,y:起点坐标
3111          //width,height:区域大小  
3112          //size:字体大小
3113          //*p:字符串起始地址               
3114          void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
3115          {         
3116   1              u8 x0=x;
3117   1              width+=x;
3118   1              height+=y;
3119   1          while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
3120   1          {       
3121   2              if(x>=width){x=x0;y+=size;}
3122   2              if(y>=height)break;//退出
3123   2              LCD_ShowChar(x,y,*p,size,0);
3124   2              x+=size/2;
3125   2              p++;
3126   2          }  
3127   1      }
3128          
3129          /****************************************************************************
3130          *函数名：LCD_ShowFontHZ
3131          *输  入：x：汉字显示的X坐标
3132          *      * y：汉字显示的Y坐标
3133          *      * cn：要显示的汉字
3134          *      * wordColor：文字的颜色
3135          *      * backColor：背景颜色
3136          *输  出：
3137          *功  能：写二号楷体汉字
3138          ****************************************************************************/
3139          #if 1
3140          void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)        
3141          {  
3142   1              u8 i, j, wordNum;
3143   1              u16 color;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 52  

3144   1              while (*cn != '\0')
3145   1              {
3146   2                      LCD_Set_Window(x, y, x+31, y+28);
3147   2                      for (wordNum=0; wordNum<20; wordNum++)
3148   2                      {       //wordNum扫描字库的字数
3149   3                              if ((CnChar32x29[wordNum].Index[0]==*cn)
3150   3                                   &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
3151   3                              {
3152   4                                      
3153   4                                      for(i=0; i<116; i++) 
3154   4                                      {       //MSK的位数
3155   5                                              color=CnChar32x29[wordNum].Msk[i];
3156   5                                              for(j=0;j<8;j++) 
3157   5                                              {
3158   6                                                      if((color&0x80)==0x80)
3159   6                                                      {
3160   7                                                              LCD_WriteData_Color(FRONT_COLOR);                                               
3161   7                                                      }                                               
3162   6                                                      else
3163   6                                                      {
3164   7                                                              LCD_WriteData_Color(BACK_COLOR); 
3165   7                                                      } 
3166   6                                                      color<<=1;
3167   6                                              }//for(j=0;j<8;j++)结束
3168   5                                      }    
3169   4                              }
3170   3                      } //for (wordNum=0; wordNum<20; wordNum++)结束  
3171   2                      cn += 2;
3172   2                      x += 32;
3173   2              }
3174   1      }
3175          #endif
3176          
3177          
3178          #if 0
              void LCD_ShowFontHZ(u16 x, u16 y, u8 *cn)
              {
                      u8 i, j, wordNum;
                      u16 color;
                      u16 x0=x; 
                      u16 y0=y; 
                      while (*cn != '\0')
                      {
                              for (wordNum=0; wordNum<20; wordNum++)
                              {       //wordNum扫描字库的字数
                                      if ((CnChar32x29[wordNum].Index[0]==*cn)
                                           &&(CnChar32x29[wordNum].Index[1]==*(cn+1)))
                                      {
                                              for(i=0; i<116; i++) 
                                              {       //MSK的位数
                                                      color=CnChar32x29[wordNum].Msk[i];
                                                      for(j=0;j<8;j++) 
                                                      {
                                                              if((color&0x80)==0x80)
                                                              {
                                                                      LCD_DrawFRONT_COLOR(x,y,FRONT_COLOR);
                                                              }                                               
                                                              else
                                                              {
                                                                      LCD_DrawFRONT_COLOR(x,y,BACK_COLOR);
                                                              } 
                                                              color<<=1;
C51 COMPILER V9.01   TFTLCD                                                                06/17/2024 09:13:04 PAGE 53  

                                                              x++;
                                                              if((x-x0)==32)
                                                              {
                                                                      x=x0;
                                                                      y++;
                                                                      if((y-y0)==29)
                                                                      {
                                                                              y=y0;
                                                                      }
                                                              }
                                                      }//for(j=0;j<8;j++)结束
                                              }       
                                      }
                                      
                              } //for (wordNum=0; wordNum<20; wordNum++)结束  
                              cn += 2;
                              x += 32;
                              x0=x;
                      }
              }       
              #endif
3227          
3228          void LCD_ShowPicture(u16 x, u16 y, u16 wide, u16 high,u8 *pic)
3229          {
3230   1              u16 temp = 0;
3231   1              long tmp=0,num=0;
3232   1              LCD_Set_Window(x, y, x+wide-1, y+high-1);
3233   1              num = wide * high*2 ;
3234   1              do
3235   1              {  
3236   2                      temp = pic[tmp + 1];
3237   2                      temp = temp << 8;
3238   2                      temp = temp | pic[tmp];
3239   2                      LCD_WriteData_Color(temp);//逐点显示
3240   2                      tmp += 2;
3241   2              }
3242   1              while(tmp < num);       
3243   1      }
3244          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5655    ----
   CONSTANT SIZE    =   7155    ----
   XDATA SIZE       =     11     238
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
